{
  "stats": {
    "suites": 20,
    "tests": 56,
    "passes": 54,
    "pending": 2,
    "failures": 0,
    "start": "2021-08-16T19:55:09.213Z",
    "end": "2021-08-16T19:55:09.301Z",
    "duration": 88,
    "testsRegistered": 56,
    "passPercent": 100,
    "pendingPercent": 3.571428571428571,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0cfdb54a-3df9-427e-9dcf-6420d1865d93",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "92d838df-2765-45db-a361-52c1db3679d4",
          "title": "Check different imposings from an object root element",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
          "file": "\\test\\imposeObjectRoot.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "261e13e9-6abb-4eba-855a-84dfa1bf8796",
              "title": "First level property imposing",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test simple property addition",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property addition",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"simple\":\"base\"}';\nconst sFeatureJSON = '{\"additional\":\"feature\"}';\nconst sResultJSON = formatResult('{\"simple\":\"base\",\"additional\":\"feature\"}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "adde82e6-f602-4673-bb84-c658352a6d78",
                  "parentUUID": "261e13e9-6abb-4eba-855a-84dfa1bf8796",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace \"base\" -> \"feature\"",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace \"base\" -> \"feature\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"simple\":\"base\"}';\nconst sFeatureJSON = '{\"simple\":\"feature\"}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "aac715b8-e05c-42b6-a19d-edb77be9768b",
                  "parentUUID": "261e13e9-6abb-4eba-855a-84dfa1bf8796",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> 2",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> 2",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":2}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "4e6a269d-1e80-489f-9838-8169477a23cd",
                  "parentUUID": "261e13e9-6abb-4eba-855a-84dfa1bf8796",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> {}",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> {}",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":{}}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "a87ede15-068c-4849-b0a1-168de31f5b5c",
                  "parentUUID": "261e13e9-6abb-4eba-855a-84dfa1bf8796",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> []",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> []",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":[]}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "d0a4fe50-0e37-4313-a478-f66126ffdbd1",
                  "parentUUID": "261e13e9-6abb-4eba-855a-84dfa1bf8796",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "adde82e6-f602-4673-bb84-c658352a6d78",
                "aac715b8-e05c-42b6-a19d-edb77be9768b",
                "4e6a269d-1e80-489f-9838-8169477a23cd",
                "a87ede15-068c-4849-b0a1-168de31f5b5c",
                "d0a4fe50-0e37-4313-a478-f66126ffdbd1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea4cede4-b610-409f-aa51-919189ce6ff5",
              "title": "Property replacement",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test object property replace {} -> 1",
                  "fullTitle": "Check different imposings from an object root element Property replacement Test object property replace {} -> 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"object\":{\"test\":1}}';\nconst sFeatureJSON = '{\"object\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "5cf718c3-a942-45f6-92ef-57278470a591",
                  "parentUUID": "ea4cede4-b610-409f-aa51-919189ce6ff5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property replace [] -> 1",
                  "fullTitle": "Check different imposings from an object root element Property replacement Test array property replace [] -> 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "f76aca06-4574-4f67-9f5c-a741aadc8c0f",
                  "parentUUID": "ea4cede4-b610-409f-aa51-919189ce6ff5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5cf718c3-a942-45f6-92ef-57278470a591",
                "f76aca06-4574-4f67-9f5c-a741aadc8c0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2123c61-0ad6-4e06-a38b-8ad1e8c5945e",
              "title": "Property merge",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\", \"2\"]}';\nconst sFeatureJSON = '{\"array\":[\"3\"]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\",\"2\",\"3\"]}');\ndebugger;\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "397088c4-d644-4054-8971-fabc5a6448e3",
                  "parentUUID": "d2123c61-0ad6-4e06-a38b-8ad1e8c5945e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":[{\"number\": 2}]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\", {\"number\": 2}]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "7252081b-d232-4117-ab3d-35b1403c5e83",
                  "parentUUID": "d2123c61-0ad6-4e06-a38b-8ad1e8c5945e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":[[\"2\"]]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\", [\"2\"]]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "baaf28dd-e554-469d-99c3-aee4524fb096",
                  "parentUUID": "d2123c61-0ad6-4e06-a38b-8ad1e8c5945e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[[\"1\"], [\"2\"]]}';\nconst sFeatureJSON = '{\"array\":[[\"3\"]]}';\nconst sResultJSON = formatResult('{\"array\": [[\"1\"], [\"2\"], [\"3\"]]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "b82609d6-3807-4525-a8ae-5ad17c2856f0",
                  "parentUUID": "d2123c61-0ad6-4e06-a38b-8ad1e8c5945e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[{\"prop\":\"1\"}, {\"prop\":\"2\"}]}';\nconst sFeatureJSON = '{\"array\":[{\"prop\":\"3\"}]}';\nconst sResultJSON = formatResult('{\"array\": [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "c4b6132c-2517-436b-96df-6f8b24f4088f",
                  "parentUUID": "d2123c61-0ad6-4e06-a38b-8ad1e8c5945e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "397088c4-d644-4054-8971-fabc5a6448e3",
                "7252081b-d232-4117-ab3d-35b1403c5e83",
                "baaf28dd-e554-469d-99c3-aee4524fb096",
                "b82609d6-3807-4525-a8ae-5ad17c2856f0",
                "c4b6132c-2517-436b-96df-6f8b24f4088f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0bbd3f95-ed18-4053-abf4-7f30c2835c1d",
          "title": "Transformation Strategies",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
          "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ef2f618-ff3a-4e89-9b1d-5f651ca47fed",
              "title": "Check the conversion strategy for ArrayExpressions",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2fcd456a-a926-4c9b-8b46-8d6f3808c350",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootAST = {\n    \"type\": \"ArrayExpression\",\n    \"start\": 0,\n    \"end\": 1,\n    \"elements\": []\n};\n//setup the base FST structure\ntempResultFST = new FSTTerminal('ArrayExpression', 'root');\ntempResultFST.setMergeStrategy('listConcat');\ntempResultFST.setCodeLanguage('json');",
                      "err": {},
                      "uuid": "41c64b13-6a83-4267-a5f0-da5fb6ec0a36",
                      "parentUUID": "2fcd456a-a926-4c9b-8b46-8d6f3808c350",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Successfull FST transformation for an empty ArrayExpression ('[]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an empty ArrayExpression ('[]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "6fbf0e40-3697-4da3-8433-e1246afd64d6",
                      "parentUUID": "2fcd456a-a926-4c9b-8b46-8d6f3808c350",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "889bab5f-bf2c-4cf9-b590-b91c96927a37",
                      "parentUUID": "2fcd456a-a926-4c9b-8b46-8d6f3808c350",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"c\\\"\", \"\\\"d\\\"\"]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"a\",\n                    \"raw\": \"'a'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"b\",\n                    \"raw\": \"'b'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"c\",\n                    \"raw\": \"'c'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"d\",\n                    \"raw\": \"'d'\"\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "f4b480b9-d056-4c7c-bfe8-b558d563a0b7",
                      "parentUUID": "2fcd456a-a926-4c9b-8b46-8d6f3808c350",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"{\\n  \\\"hello\\\": \\\"World\\\"\\n}\", \"{\\n  \\\"say\\\": 2\\n}\", \"{\\n  \\\"return\\\": false\\n}\"]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"hello\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: \"World\",\n                                raw: \"\\\"World\\\"\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"say\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: 2,\n                                raw: \"2\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"return\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "aee9a4b2-4124-4c91-9648-87472489c4a8",
                      "parentUUID": "2fcd456a-a926-4c9b-8b46-8d6f3808c350",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\n                    \"[\\n  \\\"a\\\",\\n  \\\"b\\\",\\n  \\\"c\\\",\\n  \\\"d\\\"\\n]\",\n                    \"[\\n  1,\\n  2,\\n  3,\\n  4\\n]\",\n                    \"[\\n  {\\n    \\\"hello\\\": \\\"World\\\"\\n  },\\n  {\\n    \\\"say\\\": 2\\n  },\\n  {\\n    \\\"return\\\": false\\n  }\\n]\"\n                ]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: \"a\",\n                            raw: \"\\\"a\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"b\",\n                            raw: \"\\\"b\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"c\",\n                            raw: \"\\\"c\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"d\",\n                            raw: \"\\\"d\\\"\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: 1,\n                            raw: \"1\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 3,\n                            raw: \"3\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 4,\n                            raw: \"4\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"hello\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: \"World\",\n                                        raw: \"\\\"World\\\"\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"say\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: 2,\n                                        raw: \"2\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"return\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: false,\n                                        raw: \"false\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        }\n                    ]\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "3258b827-cf03-4296-8b13-2df9ef695629",
                      "parentUUID": "2fcd456a-a926-4c9b-8b46-8d6f3808c350",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6fbf0e40-3697-4da3-8433-e1246afd64d6",
                    "889bab5f-bf2c-4cf9-b590-b91c96927a37",
                    "f4b480b9-d056-4c7c-bfe8-b558d563a0b7",
                    "aee9a4b2-4124-4c91-9648-87472489c4a8",
                    "3258b827-cf03-4296-8b13-2df9ef695629"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4e66c5f9-b9ab-4024-afdf-7ba5a2f366c4",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion \"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nresultAST = {\n    \"type\": \"ArrayExpression\",\n    \"elements\": []\n};\n//setup the base FST structure\nrootFST = new FSTTerminal('ArrayExpression', 'root');\nrootFST.setMergeStrategy('listConcat');\nrootFST.setCodeLanguage('json');",
                      "err": {},
                      "uuid": "c39dd18d-b592-4ce7-a447-c34e4a11c1a5",
                      "parentUUID": "4e66c5f9-b9ab-4024-afdf-7ba5a2f366c4",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Successfull AST transformation for an empty ArrayExpression ('[]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an empty ArrayExpression ('[]')",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.be.eql(resultAST);",
                      "err": {},
                      "uuid": "fda8efcd-ee27-43bc-8317-d02f68b34119",
                      "parentUUID": "4e66c5f9-b9ab-4024-afdf-7ba5a2f366c4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "34a8d8bb-edec-43e4-bb8b-7e645b14b88b",
                      "parentUUID": "4e66c5f9-b9ab-4024-afdf-7ba5a2f366c4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"'a'\", \"'b'\", \"'c'\", \"'d'\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"a\",\n    \"raw\": \"\\\"a\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"b\",\n    \"raw\": \"\\\"b\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"c\",\n    \"raw\": \"\\\"c\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"d\",\n    \"raw\": \"\\\"d\\\"\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "285dbf32-12c4-45bc-a681-ac28cdfb5548",
                      "parentUUID": "4e66c5f9-b9ab-4024-afdf-7ba5a2f366c4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"{ \\\"hello\\\": \\\"World\\\" }\", \"{ \\\"say\\\": 2 }\", \"{ \\\"return\\\": false }\"]);\n                rootFST.setParent();\n                rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"hello\",\n                                raw: \"\\\"hello\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: \"World\",\n                                raw: \"\\\"World\\\"\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"say\",\n                                raw: \"\\\"say\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: 2,\n                                raw: \"2\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"return\",\n                                raw: \"\\\"return\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                const recreatedAST = arrayExpStrategy.toAST(rootFST);\n                expect(recreatedAST).not.to.be.undefined;\n                expect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "a1f9288f-0fde-410a-a8cb-f993e88425b7",
                      "parentUUID": "4e66c5f9-b9ab-4024-afdf-7ba5a2f366c4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\n                    \"[\\n    'a',\\n    'b',\\n    'c',\\n    'd'\\n]\",\n                    \"[\\n    1,\\n    2,\\n    3,\\n    4\\n]\",\n                    \"[\\n    { \\\"hello\\\": \\\"World\\\" },\\n    { \\\"say\\\": 2 },\\n    { \\\"return\\\": false }\\n]\"\n                ]);\n                rootFST.setParent();\n                rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: \"a\",\n                            raw: \"\\\"a\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"b\",\n                            raw: \"\\\"b\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"c\",\n                            raw: \"\\\"c\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"d\",\n                            raw: \"\\\"d\\\"\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: 1,\n                            raw: \"1\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 3,\n                            raw: \"3\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 4,\n                            raw: \"4\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"hello\\\"\",\n                                        type: \"Literal\",\n                                        value: \"hello\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: \"World\",\n                                        raw: \"\\\"World\\\"\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"say\\\"\",\n                                        type: \"Literal\",\n                                        value: \"say\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: 2,\n                                        raw: \"2\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"return\\\"\",\n                                        type: \"Literal\",\n                                        value: \"return\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: false,\n                                        raw: \"false\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        }\n                    ]\n                });\n                const recreatedAST = arrayExpStrategy.toAST(rootFST);\n                expect(recreatedAST).not.to.be.undefined;\n                expect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "d587a4aa-6197-4f57-88b8-36bdf50aeed9",
                      "parentUUID": "4e66c5f9-b9ab-4024-afdf-7ba5a2f366c4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fda8efcd-ee27-43bc-8317-d02f68b34119",
                    "34a8d8bb-edec-43e4-bb8b-7e645b14b88b",
                    "285dbf32-12c4-45bc-a681-ac28cdfb5548",
                    "a1f9288f-0fde-410a-a8cb-f993e88425b7",
                    "d587a4aa-6197-4f57-88b8-36bdf50aeed9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7cf7fc66-ee14-4088-bdca-58fdde918093",
              "title": "Check the conversion strategy for Literal",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootAST = {\n    \"type\": \"Literal\",\n    \"value\": \"\",\n    \"raw\": \"\"\n};",
                      "err": {},
                      "uuid": "852f1c7c-3f35-43c0-84da-90364bc43b0f",
                      "parentUUID": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for empty Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"\\\",\\\"raw\\\":\\\"\\\"}\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "b12368e2-7240-4b16-8f36-befc984264bf",
                      "parentUUID": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string Literal (\"a\")",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a string Literal (\"a\")",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_a');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"a\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"a\\\",\\\"raw\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}\";\nrootAST.value = \"a\";\nrootAST.raw = \"\\\"a\\\"\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "84e0833d-1f36-4245-b070-3f2ce40e10b3",
                      "parentUUID": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number Literal (2)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a number Literal (2)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_2');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(2);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":2,\\\"raw\\\":\\\"2\\\"}\";\ntempResultFST.set\nrootAST.value = 2;\nrootAST.raw = \"2\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "38159280-91c8-41de-bf04-f766f6045313",
                      "parentUUID": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Literal (true)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a boolean Literal (true)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_true');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"true\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"true\\\",\\\"raw\\\":\\\"true\\\"}\";\nrootAST.value = \"true\";\nrootAST.raw = \"true\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "40d78a47-514c-44d2-a9a8-7507a8c1eba6",
                      "parentUUID": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Literal (false)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a boolean Literal (false)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_false');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"false\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"false\\\",\\\"raw\\\":\\\"false\\\"}\";\nrootAST.value = \"false\";\nrootAST.raw = \"false\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "0143473b-43a7-490a-a90b-aaa56e0e053b",
                      "parentUUID": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null Literal (null)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a null Literal (null)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_null');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"null\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"null\\\",\\\"raw\\\":\\\"null\\\"}\";\nrootAST.value = \"null\";\nrootAST.raw = \"null\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "66e42af6-15e4-4a9b-bace-52c79df085c8",
                      "parentUUID": "79972dad-7884-4c5e-92c1-73e924f4ae24",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b12368e2-7240-4b16-8f36-befc984264bf",
                    "84e0833d-1f36-4245-b070-3f2ce40e10b3",
                    "38159280-91c8-41de-bf04-f766f6045313",
                    "40d78a47-514c-44d2-a9a8-7507a8c1eba6",
                    "0143473b-43a7-490a-a90b-aaa56e0e053b",
                    "66e42af6-15e4-4a9b-bace-52c79df085c8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion \"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootFST = new FSTTerminal('Literal', 'root');\nrootFST.setMergeStrategy('override');\nrootFST.setCodeLanguage('json');\nrootFST.setContent(\"\");\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"\\\",\\\"raw\\\":\\\"\\\"}\";",
                      "err": {},
                      "uuid": "859c588f-7c9a-4bd1-9e0e-5ae84c096e43",
                      "parentUUID": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for empty Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"\",\n    \"raw\": \"\"\n};\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "59cf32c3-99f1-4d3b-8ec4-e1e263dea5b1",
                      "parentUUID": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string Literal (\"a\")",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a string Literal (\"a\")",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"a\",\n    \"raw\": \"\\\"a\\\"\"\n};\nrootFST.setContent(\"a\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "43443dc6-de85-4572-97d1-f2976cda8955",
                      "parentUUID": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number Literal (2)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a number Literal (2)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n};\nrootFST.setContent(2);\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "44a09558-c153-4a86-87ae-cce739598358",
                      "parentUUID": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Literal (true)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a boolean Literal (true)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"true\",\n    \"raw\": \"true\"\n};\nrootFST.setContent(\"true\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "79c23f0a-58fb-406d-8011-1b1dca666ed2",
                      "parentUUID": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Literal (false)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a boolean Literal (false)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"false\",\n    \"raw\": \"false\"\n};\nrootFST.setContent(\"false\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "ad8d028a-e693-44a4-8299-51874916d0d1",
                      "parentUUID": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null Literal (null)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a null Literal (null)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"null\",\n    \"raw\": \"null\"\n};\nrootFST.setContent(\"null\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "d2ed0921-de19-4d83-819b-0dcb5e9d9783",
                      "parentUUID": "e8b90c81-8f34-4e63-920b-062c8dda00c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "59cf32c3-99f1-4d3b-8ec4-e1e263dea5b1",
                    "43443dc6-de85-4572-97d1-f2976cda8955",
                    "44a09558-c153-4a86-87ae-cce739598358",
                    "79c23f0a-58fb-406d-8011-1b1dca666ed2",
                    "ad8d028a-e693-44a4-8299-51874916d0d1",
                    "d2ed0921-de19-4d83-819b-0dcb5e9d9783"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4522feea-b3c8-40d1-b8e7-bfa4c39114c1",
              "title": "Check the conversion strategy for ObjectExpression",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fc18c820-497c-424d-ae9a-b77612795a6c",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST = {\n    type: \"ObjectExpression\",\n    properties: []\n};\ntempResultFST = new FSTNonTerminal(\"ObjectExpression\", \"root\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ObjectExpression\\\"}\";",
                      "err": {},
                      "uuid": "4ef2df73-eedf-45b3-b697-d9c454f83e4f",
                      "parentUUID": "fc18c820-497c-424d-ae9a-b77612795a6c",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for empty ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "4df5e623-0539-4197-998a-961c8d4bb9d4",
                      "parentUUID": "fc18c820-497c-424d-ae9a-b77612795a6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"hello\"\n    },\n    value: {\n        type: \"Literal\",\n        value: \"World\",\n        raw: \"\\\"World\\\"\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'hello');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"\\\"World\\\"\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"hello\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "492fdad6-767d-439d-aad6-d458025d03ad",
                      "parentUUID": "fc18c820-497c-424d-ae9a-b77612795a6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"say\"\n    },\n    value: {\n        type: \"Literal\",\n        value: 2,\n        raw: \"2\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'say');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"2\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"say\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "2061fa60-f5fa-4197-bb88-f707d236fe24",
                      "parentUUID": "fc18c820-497c-424d-ae9a-b77612795a6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"toBe\"\n    },\n    value: {\n        type: \"Literal\",\n        value: true,\n        raw: \"true\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'toBe');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"true\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"toBe\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "9970e9c9-fe45-4038-910c-5c79b6316699",
                      "parentUUID": "fc18c820-497c-424d-ae9a-b77612795a6c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"its\"\n    },\n    value: {\n        type: \"Literal\",\n        value: null,\n        raw: \"null\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'its');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"null\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"its\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "670ebef2-1282-4bc9-8cd7-87122d043c53",
                      "parentUUID": "fc18c820-497c-424d-ae9a-b77612795a6c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4df5e623-0539-4197-998a-961c8d4bb9d4",
                    "492fdad6-767d-439d-aad6-d458025d03ad",
                    "2061fa60-f5fa-4197-bb88-f707d236fe24",
                    "9970e9c9-fe45-4038-910c-5c79b6316699",
                    "670ebef2-1282-4bc9-8cd7-87122d043c53"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "31d0e7dd-61db-427d-b282-33afc4d697d5",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion \"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResult = {\n    type: \"ObjectExpression\",\n    properties: []\n};\nrootFST = new FSTNonTerminal(\"ObjectExpression\", \"root\");\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ObjectExpression\\\"}\";",
                      "err": {},
                      "uuid": "cd6a5c5b-3734-4044-af2a-14d9927f455b",
                      "parentUUID": "31d0e7dd-61db-427d-b282-33afc4d697d5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for empty ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "76858f86-fb90-469b-a6c0-12b20f7369dc",
                      "parentUUID": "31d0e7dd-61db-427d-b282-33afc4d697d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'hello');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"\\\"World\\\"\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"hello\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"hello\"\n    },\n    value: {\n        type: \"Literal\",\n        value: \"World\",\n        raw: \"\\\"World\\\"\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "e71e6260-60f6-457e-ab9c-6d442a116c1f",
                      "parentUUID": "31d0e7dd-61db-427d-b282-33afc4d697d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'say');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"2\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"say\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"say\"\n    },\n    value: {\n        type: \"Literal\",\n        value: 2,\n        raw: \"2\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "e151505f-b38b-40c2-ac46-863e0e1dbd52",
                      "parentUUID": "31d0e7dd-61db-427d-b282-33afc4d697d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'toBe');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"true\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"toBe\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"toBe\"\n    },\n    value: {\n        type: \"Literal\",\n        value: true,\n        raw: \"true\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "f5103ab0-7b30-4b45-91ce-ba0d79978ddf",
                      "parentUUID": "31d0e7dd-61db-427d-b282-33afc4d697d5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'its');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"null\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"its\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"its\"\n    },\n    value: {\n        type: \"Literal\",\n        value: null,\n        raw: \"null\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "444e4015-59fe-4064-a01f-51c2b63f030c",
                      "parentUUID": "31d0e7dd-61db-427d-b282-33afc4d697d5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "76858f86-fb90-469b-a6c0-12b20f7369dc",
                    "e71e6260-60f6-457e-ab9c-6d442a116c1f",
                    "e151505f-b38b-40c2-ac46-863e0e1dbd52",
                    "f5103ab0-7b30-4b45-91ce-ba0d79978ddf",
                    "444e4015-59fe-4064-a01f-51c2b63f030c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc8d4879-774d-4ebd-a7bc-3a3bafbd7464",
              "title": "Check the conversion strategy for Property",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a07434cb-4d5a-4191-a596-2efb9de634e5",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootAST = {\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"test\"\n    },\n    value: undefined\n};\ntempResult = new FSTTerminal(\"Property\", \"test\");\ntempResult.setMergeStrategy('propertyCompose');\ntempResult.setCodeLanguage('json');\ntempResult.setParent();\ntempResult.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"test\\\"}}\";",
                      "err": {},
                      "uuid": "7340a959-5406-42b9-a324-b44f93d105bb",
                      "parentUUID": "a07434cb-4d5a-4191-a596-2efb9de634e5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for empty Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "857f2f49-6dac-4407-8a4f-59d0a3016d23",
                      "parentUUID": "a07434cb-4d5a-4191-a596-2efb9de634e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string Property \"Hello World\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a string Property \"Hello World\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: \"Hello World\",\n    raw: \"\\\"Hello World\\\"\"\n};\ntempResult.setContent(\"\\\"Hello World\\\"\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "b32e38ef-ba8e-4bf8-9257-4a9ad77171ac",
                      "parentUUID": "a07434cb-4d5a-4191-a596-2efb9de634e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number Property \"1\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a number Property \"1\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: 1,\n    raw: \"1\"\n};\ntempResult.setContent(\"1\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "86eb15fc-af8c-480f-b2f8-c98053426800",
                      "parentUUID": "a07434cb-4d5a-4191-a596-2efb9de634e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Property true",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a boolean Property true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: true,\n    raw: \"true\"\n};\ntempResult.setContent(\"true\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "f5ff9a2f-8a6f-4b23-8759-9f187a40f037",
                      "parentUUID": "a07434cb-4d5a-4191-a596-2efb9de634e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null Property null",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a null Property null",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: null,\n    raw: \"null\"\n};\ntempResult.setContent(\"null\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "cb81e744-9c19-4318-852d-ee14e269c883",
                      "parentUUID": "a07434cb-4d5a-4191-a596-2efb9de634e5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "857f2f49-6dac-4407-8a4f-59d0a3016d23",
                    "b32e38ef-ba8e-4bf8-9257-4a9ad77171ac",
                    "86eb15fc-af8c-480f-b2f8-c98053426800",
                    "f5ff9a2f-8a6f-4b23-8759-9f187a40f037",
                    "cb81e744-9c19-4318-852d-ee14e269c883"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "bbf33493-11dc-403d-92d5-0d044ded27dc",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion \"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST = new FSTTerminal(\"Property\", \"test\");\nrootFST.setMergeStrategy('propertyCompose');\nrootFST.setCodeLanguage('json');\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"test\\\",\\\"raw\\\":\\\"test\\\"}}\";\ntempResult = {\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"test\"\n    },\n    value: undefined\n};",
                      "err": {},
                      "uuid": "0a3c1b4d-7906-4db2-9b92-76980bc434b7",
                      "parentUUID": "bbf33493-11dc-403d-92d5-0d044ded27dc",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for empty Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "6eb82e24-cd17-43f5-bb45-5b8ee21ad95c",
                      "parentUUID": "bbf33493-11dc-403d-92d5-0d044ded27dc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string Property \"Hello World\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a string Property \"Hello World\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"\\\"Hello World\\\"\");\ntempResult.value = {\n    type: \"Literal\",\n    value: \"Hello World\",\n    raw: \"\\\"Hello World\\\"\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "13fdd43d-9594-483a-8fe1-bfc1078dac78",
                      "parentUUID": "bbf33493-11dc-403d-92d5-0d044ded27dc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number Property 1",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a number Property 1",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"1\");\ntempResult.value = {\n    type: \"Literal\",\n    value: 1,\n    raw: \"1\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "cbe6b293-d1be-49d5-97a0-1baa195bf77d",
                      "parentUUID": "bbf33493-11dc-403d-92d5-0d044ded27dc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Property true",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a boolean Property true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"true\");\ntempResult.value = {\n    type: \"Literal\",\n    value: true,\n    raw: \"true\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "1105c115-5d16-4026-80b4-3ccdf2e596ba",
                      "parentUUID": "bbf33493-11dc-403d-92d5-0d044ded27dc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null Property null",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a null Property null",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"null\");\ntempResult.value = {\n    type: \"Literal\",\n    value: null,\n    raw: \"null\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "e7f63c32-c0aa-4ce8-92e5-2f9adcf98906",
                      "parentUUID": "bbf33493-11dc-403d-92d5-0d044ded27dc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6eb82e24-cd17-43f5-bb45-5b8ee21ad95c",
                    "13fdd43d-9594-483a-8fe1-bfc1078dac78",
                    "cbe6b293-d1be-49d5-97a0-1baa195bf77d",
                    "1105c115-5d16-4026-80b4-3ccdf2e596ba",
                    "e7f63c32-c0aa-4ce8-92e5-2f9adcf98906"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3b2591c4-3e3f-4e11-8810-6a182898a098",
          "title": "Imposing Rules",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
          "file": "\\lib\\rules\\RulesTest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3daff2ff-75da-4df2-b78a-fd832c407e31",
              "title": "Check the list concatenation of arrays",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
              "file": "\\lib\\rules\\RulesTest.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Add meaningfull tests",
                  "fullTitle": "Imposing Rules Check the list concatenation of arrays Add meaningfull tests",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7330de70-7eed-4edf-928f-7f4930423f07",
                  "parentUUID": "3daff2ff-75da-4df2-b78a-fd832c407e31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "7330de70-7eed-4edf-928f-7f4930423f07"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31f0d99c-59d5-445c-8eee-7e8524b8aa2b",
              "title": "Check the composition of object expressions",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
              "file": "\\lib\\rules\\RulesTest.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Add meaningfull tests",
                  "fullTitle": "Imposing Rules Check the composition of object expressions Add meaningfull tests",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "2b1c00fa-cd47-475f-a850-5c7980e42a38",
                  "parentUUID": "31f0d99c-59d5-445c-8eee-7e8524b8aa2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "2b1c00fa-cd47-475f-a850-5c7980e42a38"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/test-results",
        "reportFilename": "testResults"
      },
      "version": "5.2.0"
    }
  }
}
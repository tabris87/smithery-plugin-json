{
  "stats": {
    "suites": 10,
    "tests": 32,
    "passes": 22,
    "pending": 10,
    "failures": 0,
    "start": "2021-07-28T06:52:13.868Z",
    "end": "2021-07-28T06:52:13.956Z",
    "duration": 88,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 31.25,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "261cbaf7-3f3e-4f7f-b76f-e89cb91d06da",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "15cb8451-351d-436a-afd8-f136abb270c9",
          "title": "Check different imposings from an object root element",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
          "file": "\\test\\imposeObjectRoot.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "42b61a93-c9b8-4a31-84e5-edd28043546e",
              "title": "First level property imposing",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test simple property addition",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property addition",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"simple\":\"base\"}';\nconst sFeatureJSON = '{\"additional\":\"feature\"}';\nconst sResultJSON = formatResult('{\"simple\":\"base\",\"additional\":\"feature\"}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "60dcbda7-df08-4a8e-8d94-5d3cd8546b6c",
                  "parentUUID": "42b61a93-c9b8-4a31-84e5-edd28043546e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace \"base\" -> \"feature\"",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace \"base\" -> \"feature\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"simple\":\"base\"}';\nconst sFeatureJSON = '{\"simple\":\"feature\"}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "b2321c2c-47af-4fb3-a1fa-c440fa7a83ab",
                  "parentUUID": "42b61a93-c9b8-4a31-84e5-edd28043546e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> 2",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> 2",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":2}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "06991ba6-13a6-479b-b932-c10a3814fd0f",
                  "parentUUID": "42b61a93-c9b8-4a31-84e5-edd28043546e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> {}",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> {}",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":{}}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "00521b8a-441b-4f4f-8d2b-db3dc25981c0",
                  "parentUUID": "42b61a93-c9b8-4a31-84e5-edd28043546e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> []",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> []",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":[]}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "d21b37b3-fb6e-4731-9895-29b00fd554bd",
                  "parentUUID": "42b61a93-c9b8-4a31-84e5-edd28043546e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60dcbda7-df08-4a8e-8d94-5d3cd8546b6c",
                "b2321c2c-47af-4fb3-a1fa-c440fa7a83ab",
                "06991ba6-13a6-479b-b932-c10a3814fd0f",
                "00521b8a-441b-4f4f-8d2b-db3dc25981c0",
                "d21b37b3-fb6e-4731-9895-29b00fd554bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70760c89-9684-4d20-aff3-128f18c6da67",
              "title": "Property replacement",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test object property replace {} -> 1",
                  "fullTitle": "Check different imposings from an object root element Property replacement Test object property replace {} -> 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"object\":{\"test\":1}}';\nconst sFeatureJSON = '{\"object\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "82d1b722-5be5-4d33-a8c4-38e622526edd",
                  "parentUUID": "70760c89-9684-4d20-aff3-128f18c6da67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property replace [] -> 1",
                  "fullTitle": "Check different imposings from an object root element Property replacement Test array property replace [] -> 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "f8b9cbcd-f8cb-4d8b-85ef-666b64165a59",
                  "parentUUID": "70760c89-9684-4d20-aff3-128f18c6da67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82d1b722-5be5-4d33-a8c4-38e622526edd",
                "f8b9cbcd-f8cb-4d8b-85ef-666b64165a59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca7112c4-e9ca-4468-b1d8-6676e406edde",
              "title": "Property merge",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\", \"2\"]}';\nconst sFeatureJSON = '{\"array\":[\"3\"]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\",\"2\",\"3\"]}');\ndebugger;\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "6f089dfa-170d-4e7f-b7a6-8a3f376370c7",
                  "parentUUID": "ca7112c4-e9ca-4468-b1d8-6676e406edde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":[{\"number\": 2}]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\", {\"number\": 2}]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "b8d28f7e-9b32-486e-9877-98f700b7099f",
                  "parentUUID": "ca7112c4-e9ca-4468-b1d8-6676e406edde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":[[\"2\"]]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\", [\"2\"]]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "b4917efa-58e5-48c8-8661-c59e485bce3f",
                  "parentUUID": "ca7112c4-e9ca-4468-b1d8-6676e406edde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[[\"1\"], [\"2\"]]}';\nconst sFeatureJSON = '{\"array\":[[\"3\"]]}';\nconst sResultJSON = formatResult('{\"array\": [[\"1\"], [\"2\"], [\"3\"]]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "06b25b34-7b4e-407f-9c4b-ba5bce9ed804",
                  "parentUUID": "ca7112c4-e9ca-4468-b1d8-6676e406edde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[{\"prop\":\"1\"}, {\"prop\":\"2\"}]}';\nconst sFeatureJSON = '{\"array\":[{\"prop\":\"3\"}]}';\nconst sResultJSON = formatResult('{\"array\": [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "2ad760b7-6510-4ef1-9914-03516b94328c",
                  "parentUUID": "ca7112c4-e9ca-4468-b1d8-6676e406edde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f089dfa-170d-4e7f-b7a6-8a3f376370c7",
                "b8d28f7e-9b32-486e-9877-98f700b7099f",
                "b4917efa-58e5-48c8-8661-c59e485bce3f",
                "06b25b34-7b4e-407f-9c4b-ba5bce9ed804",
                "2ad760b7-6510-4ef1-9914-03516b94328c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "edf65fd6-1c22-4d9d-b55f-bec9b93b3f36",
          "title": "Check the conversion strategy for ArrayExpressions",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\ArrayExpression.spec.js",
          "file": "\\lib\\astTools\\strategies\\ArrayExpression.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab230326-0917-4bc9-b658-01627b318944",
              "title": "Test the AST to FST conversion",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\ArrayExpression.spec.js",
              "file": "\\lib\\astTools\\strategies\\ArrayExpression.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//setup the base AST structure\nrootAST = {\n    \"type\": \"ArrayExpression\",\n    \"start\": 0,\n    \"end\": 1,\n    \"elements\": []\n};\n//setup the base FST structure\ntempResultFST = new FSTTerminal('ArrayExpression', 'root');\ntempResultFST.setMergeStrategy('listConcat');\ntempResultFST.setCodeLanguage('json');",
                  "err": {},
                  "uuid": "2aec735f-97e8-4378-b1c7-08699142be2d",
                  "parentUUID": "ab230326-0917-4bc9-b658-01627b318944",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Successfull FST transformation for an empty ArrayExpression ('[]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an empty ArrayExpression ('[]')",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tempResultFST.setContent([]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                  "err": {},
                  "uuid": "78de2e17-a404-4fda-a836-9193120d4e53",
                  "parentUUID": "ab230326-0917-4bc9-b658-01627b318944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tempResultFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                  "err": {},
                  "uuid": "92b41838-8772-41d5-8230-0630a7a51dd1",
                  "parentUUID": "ab230326-0917-4bc9-b658-01627b318944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tempResultFST.setContent([\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"c\\\"\", \"\\\"d\\\"\"]);\n            tempResultFST.setParent();\n            tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n            rootAST.elements.push({\n                \"type\": \"Literal\",\n                \"value\": \"a\",\n                \"raw\": \"'a'\"\n            });\n            rootAST.elements.push({\n                \"type\": \"Literal\",\n                \"value\": \"b\",\n                \"raw\": \"'b'\"\n            });\n            rootAST.elements.push({\n                \"type\": \"Literal\",\n                \"value\": \"c\",\n                \"raw\": \"'c'\"\n            });\n            rootAST.elements.push({\n                \"type\": \"Literal\",\n                \"value\": \"d\",\n                \"raw\": \"'d'\"\n            });\n            const transformedFST = arrayExpStrategy.toFST(rootAST);\n            expect(transformedFST).not.to.be.undefined;\n            expect(transformedFST instanceof FSTTerminal).to.be.true;\n            expect(transformedFST).to.be.eql(tempResultFST);",
                  "err": {},
                  "uuid": "2f5f5d26-1436-477c-a469-9946a2a83fa6",
                  "parentUUID": "ab230326-0917-4bc9-b658-01627b318944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tempResultFST.setContent([\"{\\n  \\\"hello\\\": \\\"World\\\"\\n}\", \"{\\n  \\\"say\\\": 2\\n}\", \"{\\n  \\\"return\\\": false\\n}\"]);\n            tempResultFST.setParent();\n            tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n            rootAST.elements.push({\n                type: \"ObjectExpression\",\n                properties: [\n                    {\n                        type: \"Property\",\n                        key: {\n                            type: \"Identifier\",\n                            name: \"hello\"\n                        },\n                        value: {\n                            type: \"Literal\",\n                            value: \"World\",\n                            raw: \"\\\"World\\\"\"\n                        },\n                        kind: \"init\"\n                    }\n                ]\n            });\n            rootAST.elements.push({\n                type: \"ObjectExpression\",\n                properties: [\n                    {\n                        type: \"Property\",\n                        key: {\n                            type: \"Identifier\",\n                            name: \"say\"\n                        },\n                        value: {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        kind: \"init\"\n                    }\n                ]\n            });\n            rootAST.elements.push({\n                type: \"ObjectExpression\",\n                properties: [\n                    {\n                        type: \"Property\",\n                        key: {\n                            type: \"Identifier\",\n                            name: \"return\"\n                        },\n                        value: {\n                            type: \"Literal\",\n                            value: false,\n                            raw: \"false\"\n                        },\n                        kind: \"init\"\n                    }\n                ]\n            });\n            const transformedFST = arrayExpStrategy.toFST(rootAST);\n            expect(transformedFST).not.to.be.undefined;\n            expect(transformedFST instanceof FSTTerminal).to.be.true;\n            expect(transformedFST).to.be.eql(tempResultFST);",
                  "err": {},
                  "uuid": "7f8c5c0b-dbda-409e-985d-e338e3cd3aa5",
                  "parentUUID": "ab230326-0917-4bc9-b658-01627b318944",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tempResultFST.setContent([\n                \"[\\n  \\\"a\\\",\\n  \\\"b\\\",\\n  \\\"c\\\",\\n  \\\"d\\\"\\n]\",\n                \"[\\n  1,\\n  2,\\n  3,\\n  4\\n]\",\n                \"[\\n  {\\n    \\\"hello\\\": \\\"World\\\"\\n  },\\n  {\\n    \\\"say\\\": 2\\n  },\\n  {\\n    \\\"return\\\": false\\n  }\\n]\"\n            ]);\n            tempResultFST.setParent();\n            tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n            rootAST.elements.push({\n                type: \"ArrayExpression\",\n                elements: [\n                    {\n                        type: \"Literal\",\n                        value: \"a\",\n                        raw: \"\\\"a\\\"\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: \"b\",\n                        raw: \"\\\"b\\\"\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: \"c\",\n                        raw: \"\\\"c\\\"\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: \"d\",\n                        raw: \"\\\"d\\\"\"\n                    }\n                ]\n            });\n            rootAST.elements.push({\n                type: \"ArrayExpression\",\n                elements: [\n                    {\n                        type: \"Literal\",\n                        value: 1,\n                        raw: \"1\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: 2,\n                        raw: \"2\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: 3,\n                        raw: \"3\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: 4,\n                        raw: \"4\"\n                    }\n                ]\n            });\n            rootAST.elements.push({\n                type: \"ArrayExpression\",\n                elements: [\n                    {\n                        type: \"ObjectExpression\",\n                        properties: [\n                            {\n                                type: \"Property\",\n                                key: {\n                                    type: \"Identifier\",\n                                    name: \"hello\"\n                                },\n                                value: {\n                                    type: \"Literal\",\n                                    value: \"World\",\n                                    raw: \"\\\"World\\\"\"\n                                },\n                                kind: \"init\"\n                            }\n                        ]\n                    },\n                    {\n                        type: \"ObjectExpression\",\n                        properties: [\n                            {\n                                type: \"Property\",\n                                key: {\n                                    type: \"Identifier\",\n                                    name: \"say\"\n                                },\n                                value: {\n                                    type: \"Literal\",\n                                    value: 2,\n                                    raw: \"2\"\n                                },\n                                kind: \"init\"\n                            }\n                        ]\n                    },\n                    {\n                        type: \"ObjectExpression\",\n                        properties: [\n                            {\n                                type: \"Property\",\n                                key: {\n                                    type: \"Identifier\",\n                                    name: \"return\"\n                                },\n                                value: {\n                                    type: \"Literal\",\n                                    value: false,\n                                    raw: \"false\"\n                                },\n                                kind: \"init\"\n                            }\n                        ]\n                    }\n                ]\n            });\n            const transformedFST = arrayExpStrategy.toFST(rootAST);\n            expect(transformedFST).not.to.be.undefined;\n            expect(transformedFST instanceof FSTTerminal).to.be.true;\n            expect(transformedFST).to.be.eql(tempResultFST);",
                  "err": {},
                  "uuid": "a631005b-e161-4841-9719-6fdc827816cd",
                  "parentUUID": "ab230326-0917-4bc9-b658-01627b318944",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78de2e17-a404-4fda-a836-9193120d4e53",
                "92b41838-8772-41d5-8230-0630a7a51dd1",
                "2f5f5d26-1436-477c-a469-9946a2a83fa6",
                "7f8c5c0b-dbda-409e-985d-e338e3cd3aa5",
                "a631005b-e161-4841-9719-6fdc827816cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "059594a1-422c-47a1-80c6-c22e54880919",
              "title": "Test the FST to AST conversion",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\ArrayExpression.spec.js",
              "file": "\\lib\\astTools\\strategies\\ArrayExpression.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the FST to AST conversion \"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//setup the base AST structure\nresultAST = {\n    \"type\": \"ArrayExpression\",\n    \"elements\": []\n};\n//setup the base FST structure\nrootFST = new FSTTerminal('ArrayExpression', 'root');\nrootFST.setMergeStrategy('listConcat');\nrootFST.setCodeLanguage('json');",
                  "err": {},
                  "uuid": "3aed1930-b635-4e8a-953e-15c03794f60b",
                  "parentUUID": "059594a1-422c-47a1-80c6-c22e54880919",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Successfull AST transformation for an empty ArrayExpression ('[]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an empty ArrayExpression ('[]')",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "rootFST.setContent([]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.be.eql(resultAST);",
                  "err": {},
                  "uuid": "073bdc4b-8c2f-4b33-948a-9fefaa840056",
                  "parentUUID": "059594a1-422c-47a1-80c6-c22e54880919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "rootFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                  "err": {},
                  "uuid": "7b43abfd-7793-4a36-bfa6-2e851ecf29c8",
                  "parentUUID": "059594a1-422c-47a1-80c6-c22e54880919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "rootFST.setContent([\"'a'\", \"'b'\", \"'c'\", \"'d'\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"a\",\n    \"raw\": \"\\\"a\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"b\",\n    \"raw\": \"\\\"b\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"c\",\n    \"raw\": \"\\\"c\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"d\",\n    \"raw\": \"\\\"d\\\"\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                  "err": {},
                  "uuid": "f130c3fb-d3d8-4ee2-8af8-1173f7c2d924",
                  "parentUUID": "059594a1-422c-47a1-80c6-c22e54880919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "rootFST.setContent([\"{ \\\"hello\\\": \\\"World\\\" }\", \"{ \\\"say\\\": 2 }\", \"{ \\\"return\\\": false }\"]);\n            rootFST.setParent();\n            rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n            resultAST.elements.push({\n                type: \"ObjectExpression\",\n                properties: [\n                    {\n                        type: \"Property\",\n                        key: {\n                            type: \"Literal\",\n                            value: \"hello\",\n                            raw: \"\\\"hello\\\"\"\n                        },\n                        value: {\n                            type: \"Literal\",\n                            value: \"World\",\n                            raw: \"\\\"World\\\"\"\n                        },\n                        kind: \"init\"\n                    }\n                ]\n            });\n            resultAST.elements.push({\n                type: \"ObjectExpression\",\n                properties: [\n                    {\n                        type: \"Property\",\n                        key: {\n                            type: \"Literal\",\n                            value: \"say\",\n                            raw: \"\\\"say\\\"\"\n                        },\n                        value: {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        kind: \"init\"\n                    }\n                ]\n            });\n            resultAST.elements.push({\n                type: \"ObjectExpression\",\n                properties: [\n                    {\n                        type: \"Property\",\n                        key: {\n                            type: \"Literal\",\n                            value: \"return\",\n                            raw: \"\\\"return\\\"\"\n                        },\n                        value: {\n                            type: \"Literal\",\n                            value: false,\n                            raw: \"false\"\n                        },\n                        kind: \"init\"\n                    }\n                ]\n            });\n            const recreatedAST = arrayExpStrategy.toAST(rootFST);\n            expect(recreatedAST).not.to.be.undefined;\n            expect(recreatedAST).to.deep.equal(resultAST);",
                  "err": {},
                  "uuid": "210a8ddd-3e87-4369-8f42-dd92f7c19ffc",
                  "parentUUID": "059594a1-422c-47a1-80c6-c22e54880919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                  "fullTitle": "Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "rootFST.setContent([\n                \"[\\n    'a',\\n    'b',\\n    'c',\\n    'd'\\n]\",\n                \"[\\n    1,\\n    2,\\n    3,\\n    4\\n]\",\n                \"[\\n    { \\\"hello\\\": \\\"World\\\" },\\n    { \\\"say\\\": 2 },\\n    { \\\"return\\\": false }\\n]\"\n            ]);\n            rootFST.setParent();\n            rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n            resultAST.elements.push({\n                type: \"ArrayExpression\",\n                elements: [\n                    {\n                        type: \"Literal\",\n                        value: \"a\",\n                        raw: \"\\\"a\\\"\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: \"b\",\n                        raw: \"\\\"b\\\"\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: \"c\",\n                        raw: \"\\\"c\\\"\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: \"d\",\n                        raw: \"\\\"d\\\"\"\n                    }\n                ]\n            });\n            resultAST.elements.push({\n                type: \"ArrayExpression\",\n                elements: [\n                    {\n                        type: \"Literal\",\n                        value: 1,\n                        raw: \"1\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: 2,\n                        raw: \"2\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: 3,\n                        raw: \"3\"\n                    },\n                    {\n                        type: \"Literal\",\n                        value: 4,\n                        raw: \"4\"\n                    }\n                ]\n            });\n            resultAST.elements.push({\n                type: \"ArrayExpression\",\n                elements: [\n                    {\n                        type: \"ObjectExpression\",\n                        properties: [\n                            {\n                                type: \"Property\",\n                                key: {\n                                    raw: \"\\\"hello\\\"\",\n                                    type: \"Literal\",\n                                    value: \"hello\"\n                                },\n                                value: {\n                                    type: \"Literal\",\n                                    value: \"World\",\n                                    raw: \"\\\"World\\\"\"\n                                },\n                                kind: \"init\"\n                            }\n                        ]\n                    },\n                    {\n                        type: \"ObjectExpression\",\n                        properties: [\n                            {\n                                type: \"Property\",\n                                key: {\n                                    raw: \"\\\"say\\\"\",\n                                    type: \"Literal\",\n                                    value: \"say\"\n                                },\n                                value: {\n                                    type: \"Literal\",\n                                    value: 2,\n                                    raw: \"2\"\n                                },\n                                kind: \"init\"\n                            }\n                        ]\n                    },\n                    {\n                        type: \"ObjectExpression\",\n                        properties: [\n                            {\n                                type: \"Property\",\n                                key: {\n                                    raw: \"\\\"return\\\"\",\n                                    type: \"Literal\",\n                                    value: \"return\"\n                                },\n                                value: {\n                                    type: \"Literal\",\n                                    value: false,\n                                    raw: \"false\"\n                                },\n                                kind: \"init\"\n                            }\n                        ]\n                    }\n                ]\n            });\n            const recreatedAST = arrayExpStrategy.toAST(rootFST);\n            expect(recreatedAST).not.to.be.undefined;\n            expect(recreatedAST).to.deep.equal(resultAST);",
                  "err": {},
                  "uuid": "95cce3cb-de3b-45a5-ba4e-272edd7b7019",
                  "parentUUID": "059594a1-422c-47a1-80c6-c22e54880919",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "073bdc4b-8c2f-4b33-948a-9fefaa840056",
                "7b43abfd-7793-4a36-bfa6-2e851ecf29c8",
                "f130c3fb-d3d8-4ee2-8af8-1173f7c2d924",
                "210a8ddd-3e87-4369-8f42-dd92f7c19ffc",
                "95cce3cb-de3b-45a5-ba4e-272edd7b7019"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fda9da1a-a2e0-4f51-b0b1-2833950fd612",
          "title": "Check the conversion strategy for Literal",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\Literal.spec.js",
          "file": "\\lib\\astTools\\strategies\\Literal.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7e6cd1df-c884-41d7-92c7-b02b292cfac7",
              "title": "Test the AST to FST conversion",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\Literal.spec.js",
              "file": "\\lib\\astTools\\strategies\\Literal.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check correct FST transformation for empty Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for empty Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1baa91ad-22d7-4ff1-8b7a-a6d5b1722007",
                  "parentUUID": "7e6cd1df-c884-41d7-92c7-b02b292cfac7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct FST transformation for a string Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a string Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "401816b2-8004-4158-a120-85f2b53a08da",
                  "parentUUID": "7e6cd1df-c884-41d7-92c7-b02b292cfac7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct FST transformation for a number Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a number Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3d43914f-ec74-49fe-a42b-7d4ef51a4dcc",
                  "parentUUID": "7e6cd1df-c884-41d7-92c7-b02b292cfac7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct FST transformation for a boolean Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a boolean Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "436df94a-1926-4bd6-b7fe-b43ad333acb5",
                  "parentUUID": "7e6cd1df-c884-41d7-92c7-b02b292cfac7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct FST transformation for a null Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a null Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "75d455f9-0eb2-4439-8624-9839bf240478",
                  "parentUUID": "7e6cd1df-c884-41d7-92c7-b02b292cfac7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "1baa91ad-22d7-4ff1-8b7a-a6d5b1722007",
                "401816b2-8004-4158-a120-85f2b53a08da",
                "3d43914f-ec74-49fe-a42b-7d4ef51a4dcc",
                "436df94a-1926-4bd6-b7fe-b43ad333acb5",
                "75d455f9-0eb2-4439-8624-9839bf240478"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a44daa7-d515-4d6b-ab9d-d2dfa0baf8d5",
              "title": "Test the FST to AST conversion",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\Literal.spec.js",
              "file": "\\lib\\astTools\\strategies\\Literal.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check correct AST transformation for empty Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for empty Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9966a579-7674-4c9e-9715-bdd8cb9b066a",
                  "parentUUID": "5a44daa7-d515-4d6b-ab9d-d2dfa0baf8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct AST transformation for a string Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a string Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4582d162-10ef-4e20-bacc-a6b6bd5ba6df",
                  "parentUUID": "5a44daa7-d515-4d6b-ab9d-d2dfa0baf8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct AST transformation for a number Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a number Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4004ee0e-ef6f-4593-a522-63ed11e74301",
                  "parentUUID": "5a44daa7-d515-4d6b-ab9d-d2dfa0baf8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct AST transformation for a boolean Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a boolean Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fc83be14-9dcd-44eb-87bb-07ad2acdfbb0",
                  "parentUUID": "5a44daa7-d515-4d6b-ab9d-d2dfa0baf8d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check correct AST transformation for a null Literal \"\"",
                  "fullTitle": "Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a null Literal \"\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9e49d7b3-8732-4bd2-8111-5ee3964ccc5f",
                  "parentUUID": "5a44daa7-d515-4d6b-ab9d-d2dfa0baf8d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9966a579-7674-4c9e-9715-bdd8cb9b066a",
                "4582d162-10ef-4e20-bacc-a6b6bd5ba6df",
                "4004ee0e-ef6f-4593-a522-63ed11e74301",
                "fc83be14-9dcd-44eb-87bb-07ad2acdfbb0",
                "9e49d7b3-8732-4bd2-8111-5ee3964ccc5f"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/test-results",
        "reportFilename": "testResults"
      },
      "version": "5.2.0"
    }
  }
}
{
  "stats": {
    "suites": 21,
    "tests": 57,
    "passes": 57,
    "pending": 0,
    "failures": 0,
    "start": "2021-08-30T07:15:06.488Z",
    "end": "2021-08-30T07:15:06.568Z",
    "duration": 80,
    "testsRegistered": 57,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b2895244-924c-470a-be46-c2bb5194b4f1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9263edeb-9a6e-49aa-aa41-3206e524f17d",
          "title": "Transformation Strategies",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
          "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7acc4197-c869-4f69-96e6-fb8a88da72bd",
              "title": "Check the conversion strategy for ArrayExpressions",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "be2a841a-c41d-4fd2-8700-678a5ce1993e",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootAST = {\n    \"type\": \"ArrayExpression\",\n    \"start\": 0,\n    \"end\": 1,\n    \"elements\": []\n};\n//setup the base FST structure\ntempResultFST = new FSTTerminal('ArrayExpression', 'root');\ntempResultFST.setMergeStrategy('listConcat');\ntempResultFST.setCodeLanguage('json');",
                      "err": {},
                      "uuid": "315ab29b-442f-494a-bd3f-3d86f9895cec",
                      "parentUUID": "be2a841a-c41d-4fd2-8700-678a5ce1993e",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Successfull FST transformation for an empty ArrayExpression ('[]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an empty ArrayExpression ('[]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "80718391-fb82-4cbc-884e-a5ec9680c158",
                      "parentUUID": "be2a841a-c41d-4fd2-8700-678a5ce1993e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "70872a04-ced5-4b4d-b39b-b3becc856de0",
                      "parentUUID": "be2a841a-c41d-4fd2-8700-678a5ce1993e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"c\\\"\", \"\\\"d\\\"\"]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"a\",\n                    \"raw\": \"'a'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"b\",\n                    \"raw\": \"'b'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"c\",\n                    \"raw\": \"'c'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"d\",\n                    \"raw\": \"'d'\"\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "8a3c0851-171d-4ed4-a6d7-9f7d319631c6",
                      "parentUUID": "be2a841a-c41d-4fd2-8700-678a5ce1993e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"{\\n  \\\"hello\\\": \\\"World\\\"\\n}\", \"{\\n  \\\"say\\\": 2\\n}\", \"{\\n  \\\"return\\\": false\\n}\"]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"hello\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: \"World\",\n                                raw: \"\\\"World\\\"\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"say\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: 2,\n                                raw: \"2\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"return\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "7d143d4a-b1eb-4abb-8401-fbc849af26ce",
                      "parentUUID": "be2a841a-c41d-4fd2-8700-678a5ce1993e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\n                    \"[\\n  \\\"a\\\",\\n  \\\"b\\\",\\n  \\\"c\\\",\\n  \\\"d\\\"\\n]\",\n                    \"[\\n  1,\\n  2,\\n  3,\\n  4\\n]\",\n                    \"[\\n  {\\n    \\\"hello\\\": \\\"World\\\"\\n  },\\n  {\\n    \\\"say\\\": 2\\n  },\\n  {\\n    \\\"return\\\": false\\n  }\\n]\"\n                ]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: \"a\",\n                            raw: \"\\\"a\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"b\",\n                            raw: \"\\\"b\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"c\",\n                            raw: \"\\\"c\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"d\",\n                            raw: \"\\\"d\\\"\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: 1,\n                            raw: \"1\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 3,\n                            raw: \"3\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 4,\n                            raw: \"4\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"hello\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: \"World\",\n                                        raw: \"\\\"World\\\"\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"say\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: 2,\n                                        raw: \"2\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"return\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: false,\n                                        raw: \"false\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        }\n                    ]\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "e518ba1c-2e16-4309-a2e6-8f6e6fbb9a8f",
                      "parentUUID": "be2a841a-c41d-4fd2-8700-678a5ce1993e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "80718391-fb82-4cbc-884e-a5ec9680c158",
                    "70872a04-ced5-4b4d-b39b-b3becc856de0",
                    "8a3c0851-171d-4ed4-a6d7-9f7d319631c6",
                    "7d143d4a-b1eb-4abb-8401-fbc849af26ce",
                    "e518ba1c-2e16-4309-a2e6-8f6e6fbb9a8f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d2fe9f43-138e-4271-88bd-eeaf8fa78b13",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion \"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nresultAST = {\n    \"type\": \"ArrayExpression\",\n    \"elements\": []\n};\n//setup the base FST structure\nrootFST = new FSTTerminal('ArrayExpression', 'root');\nrootFST.setMergeStrategy('listConcat');\nrootFST.setCodeLanguage('json');",
                      "err": {},
                      "uuid": "e88fe72b-dd8f-4b21-ac9d-1b7fb4f2a87b",
                      "parentUUID": "d2fe9f43-138e-4271-88bd-eeaf8fa78b13",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Successfull AST transformation for an empty ArrayExpression ('[]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an empty ArrayExpression ('[]')",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.be.eql(resultAST);",
                      "err": {},
                      "uuid": "9fc7f70e-6cbe-478b-a22b-f0f426667198",
                      "parentUUID": "d2fe9f43-138e-4271-88bd-eeaf8fa78b13",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "487845a7-dcac-47ed-bb27-63d47f1c84b6",
                      "parentUUID": "d2fe9f43-138e-4271-88bd-eeaf8fa78b13",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"'a'\", \"'b'\", \"'c'\", \"'d'\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"a\",\n    \"raw\": \"\\\"a\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"b\",\n    \"raw\": \"\\\"b\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"c\",\n    \"raw\": \"\\\"c\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"d\",\n    \"raw\": \"\\\"d\\\"\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "4cac3c36-f584-4632-b293-e71ecb5b7d0a",
                      "parentUUID": "d2fe9f43-138e-4271-88bd-eeaf8fa78b13",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"{ \\\"hello\\\": \\\"World\\\" }\", \"{ \\\"say\\\": 2 }\", \"{ \\\"return\\\": false }\"]);\n                rootFST.setParent();\n                rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"hello\",\n                                raw: \"\\\"hello\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: \"World\",\n                                raw: \"\\\"World\\\"\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"say\",\n                                raw: \"\\\"say\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: 2,\n                                raw: \"2\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"return\",\n                                raw: \"\\\"return\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                const recreatedAST = arrayExpStrategy.toAST(rootFST);\n                expect(recreatedAST).not.to.be.undefined;\n                expect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "a46bdd27-48ac-446d-8bdf-ebaaf79cbf76",
                      "parentUUID": "d2fe9f43-138e-4271-88bd-eeaf8fa78b13",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\n                    \"[\\n    'a',\\n    'b',\\n    'c',\\n    'd'\\n]\",\n                    \"[\\n    1,\\n    2,\\n    3,\\n    4\\n]\",\n                    \"[\\n    { \\\"hello\\\": \\\"World\\\" },\\n    { \\\"say\\\": 2 },\\n    { \\\"return\\\": false }\\n]\"\n                ]);\n                rootFST.setParent();\n                rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: \"a\",\n                            raw: \"\\\"a\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"b\",\n                            raw: \"\\\"b\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"c\",\n                            raw: \"\\\"c\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"d\",\n                            raw: \"\\\"d\\\"\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: 1,\n                            raw: \"1\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 3,\n                            raw: \"3\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 4,\n                            raw: \"4\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"hello\\\"\",\n                                        type: \"Literal\",\n                                        value: \"hello\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: \"World\",\n                                        raw: \"\\\"World\\\"\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"say\\\"\",\n                                        type: \"Literal\",\n                                        value: \"say\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: 2,\n                                        raw: \"2\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"return\\\"\",\n                                        type: \"Literal\",\n                                        value: \"return\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: false,\n                                        raw: \"false\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        }\n                    ]\n                });\n                const recreatedAST = arrayExpStrategy.toAST(rootFST);\n                expect(recreatedAST).not.to.be.undefined;\n                expect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "907537d4-60b1-4905-8733-3aaac0ad9a2a",
                      "parentUUID": "d2fe9f43-138e-4271-88bd-eeaf8fa78b13",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9fc7f70e-6cbe-478b-a22b-f0f426667198",
                    "487845a7-dcac-47ed-bb27-63d47f1c84b6",
                    "4cac3c36-f584-4632-b293-e71ecb5b7d0a",
                    "a46bdd27-48ac-446d-8bdf-ebaaf79cbf76",
                    "907537d4-60b1-4905-8733-3aaac0ad9a2a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f96fc04-19da-4a9d-840b-39f66296cfcb",
              "title": "Check the conversion strategy for Literal",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootAST = {\n    \"type\": \"Literal\",\n    \"value\": \"\",\n    \"raw\": \"\"\n};",
                      "err": {},
                      "uuid": "515b4c5c-9e1f-49bd-af4c-5a7c52c4994c",
                      "parentUUID": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for empty Literal \"\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"\\\",\\\"raw\\\":\\\"\\\"}\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "09820642-76ae-4a96-a25f-d88cc9beab5b",
                      "parentUUID": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string Literal (\"a\")",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a string Literal (\"a\")",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_a');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"a\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"a\\\",\\\"raw\\\":\\\"\\\\\\\"a\\\\\\\"\\\"}\";\nrootAST.value = \"a\";\nrootAST.raw = \"\\\"a\\\"\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "dd84154e-e76c-4a8a-9b4d-62b4e22e24c7",
                      "parentUUID": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number Literal (2)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a number Literal (2)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_2');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(2);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":2,\\\"raw\\\":\\\"2\\\"}\";\ntempResultFST.set\nrootAST.value = 2;\nrootAST.raw = \"2\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "e415fa00-46d4-472a-a548-e1e5435208b6",
                      "parentUUID": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Literal (true)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a boolean Literal (true)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_true');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"true\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"true\\\",\\\"raw\\\":\\\"true\\\"}\";\nrootAST.value = \"true\";\nrootAST.raw = \"true\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "ebb7a127-f39a-4c2b-b51e-bf02ae0724cc",
                      "parentUUID": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Literal (false)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a boolean Literal (false)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_false');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"false\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"false\\\",\\\"raw\\\":\\\"false\\\"}\";\nrootAST.value = \"false\";\nrootAST.raw = \"false\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "82caac0d-e014-4eeb-bd38-645509c392e5",
                      "parentUUID": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null Literal (null)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a null Literal (null)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base FST structure\nconst tempResultFST = new FSTTerminal('Literal', 'Literal_null');\ntempResultFST.setMergeStrategy('override');\ntempResultFST.setCodeLanguage('json');\ntempResultFST.setContent(\"null\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"null\\\",\\\"raw\\\":\\\"null\\\"}\";\nrootAST.value = \"null\";\nrootAST.raw = \"null\";\nconst transformedFST = literalStrategy.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "6cc180e2-77bb-4bf1-b530-5a05f7847eb2",
                      "parentUUID": "4f373a70-716e-4b5f-b72e-b918683bd82e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "09820642-76ae-4a96-a25f-d88cc9beab5b",
                    "dd84154e-e76c-4a8a-9b4d-62b4e22e24c7",
                    "e415fa00-46d4-472a-a548-e1e5435208b6",
                    "ebb7a127-f39a-4c2b-b51e-bf02ae0724cc",
                    "82caac0d-e014-4eeb-bd38-645509c392e5",
                    "6cc180e2-77bb-4bf1-b530-5a05f7847eb2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion \"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootFST = new FSTTerminal('Literal', 'root');\nrootFST.setMergeStrategy('override');\nrootFST.setCodeLanguage('json');\nrootFST.setContent(\"\");\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"\\\",\\\"raw\\\":\\\"\\\"}\";",
                      "err": {},
                      "uuid": "643a21a8-b654-4475-900b-a3ed38bb43ee",
                      "parentUUID": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for empty Literal \"\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"\",\n    \"raw\": \"\"\n};\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "0b73aac1-9996-49a6-ac31-1c0710b39b54",
                      "parentUUID": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string Literal (\"a\")",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a string Literal (\"a\")",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"a\",\n    \"raw\": \"\\\"a\\\"\"\n};\nrootFST.setContent(\"a\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "7f84212d-12ee-4a57-9bf3-0b9ae649b627",
                      "parentUUID": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number Literal (2)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a number Literal (2)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n};\nrootFST.setContent(2);\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "7c27e851-10d4-4742-8039-0a6814c4b365",
                      "parentUUID": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Literal (true)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a boolean Literal (true)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"true\",\n    \"raw\": \"true\"\n};\nrootFST.setContent(\"true\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "3a85c8de-3106-4611-8807-71bc196a4dc9",
                      "parentUUID": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Literal (false)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a boolean Literal (false)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"false\",\n    \"raw\": \"false\"\n};\nrootFST.setContent(\"false\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "6fe99384-d1d6-416f-9497-a7859226c692",
                      "parentUUID": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null Literal (null)",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a null Literal (null)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const tempResultAST = {\n    \"type\": \"Literal\",\n    \"value\": \"null\",\n    \"raw\": \"null\"\n};\nrootFST.setContent(\"null\");\nconst transformedAST = literalStrategy.toAST(rootFST);\nexpect(transformedAST).to.be.eql(tempResultAST);",
                      "err": {},
                      "uuid": "6db12fbd-e17d-49f7-b43b-2221f69b2422",
                      "parentUUID": "3d6d0270-d63d-4def-b323-b2a8efd8cee5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0b73aac1-9996-49a6-ac31-1c0710b39b54",
                    "7f84212d-12ee-4a57-9bf3-0b9ae649b627",
                    "7c27e851-10d4-4742-8039-0a6814c4b365",
                    "3a85c8de-3106-4611-8807-71bc196a4dc9",
                    "6fe99384-d1d6-416f-9497-a7859226c692",
                    "6db12fbd-e17d-49f7-b43b-2221f69b2422"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e2408c4b-35c4-4b49-8651-b813c068e32e",
              "title": "Check the conversion strategy for ObjectExpression",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a4236df7-8a2f-4608-867d-72bf4c23c7f9",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST = {\n    type: \"ObjectExpression\",\n    properties: []\n};\ntempResultFST = new FSTNonTerminal(\"ObjectExpression\", \"root\");\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ObjectExpression\\\"}\";",
                      "err": {},
                      "uuid": "436d2fdc-72c5-4a98-b19e-66887cbd3710",
                      "parentUUID": "a4236df7-8a2f-4608-867d-72bf4c23c7f9",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for empty ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "fb4f7748-6a42-4a5c-aca1-e4ab245d4827",
                      "parentUUID": "a4236df7-8a2f-4608-867d-72bf4c23c7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"hello\"\n    },\n    value: {\n        type: \"Literal\",\n        value: \"World\",\n        raw: \"\\\"World\\\"\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'hello');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"\\\"World\\\"\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"hello\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "303ad87c-4511-411a-872e-d0431bf01ec5",
                      "parentUUID": "a4236df7-8a2f-4608-867d-72bf4c23c7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"say\"\n    },\n    value: {\n        type: \"Literal\",\n        value: 2,\n        raw: \"2\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'say');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"2\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"say\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "afc39062-c08a-4825-aacc-f72b281be27f",
                      "parentUUID": "a4236df7-8a2f-4608-867d-72bf4c23c7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"toBe\"\n    },\n    value: {\n        type: \"Literal\",\n        value: true,\n        raw: \"true\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'toBe');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"true\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"toBe\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "23089e83-6a13-4ea7-9d47-b1e61d60e7b5",
                      "parentUUID": "a4236df7-8a2f-4608-867d-72bf4c23c7f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"its\"\n    },\n    value: {\n        type: \"Literal\",\n        value: null,\n        raw: \"null\"\n    },\n    kind: \"init\"\n});\nconst textChild = new FSTTerminal('Property', 'its');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"null\");\ntextChild.setParent(tempResultFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"its\\\"},\\\"kind\\\":\\\"init\\\"}\";\ntempResultFST.addChild(textChild);\nconst transformedFST = strat.toFST(rootAST);\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "d540ef8b-9abe-407e-b407-8fd622639404",
                      "parentUUID": "a4236df7-8a2f-4608-867d-72bf4c23c7f9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fb4f7748-6a42-4a5c-aca1-e4ab245d4827",
                    "303ad87c-4511-411a-872e-d0431bf01ec5",
                    "afc39062-c08a-4825-aacc-f72b281be27f",
                    "23089e83-6a13-4ea7-9d47-b1e61d60e7b5",
                    "d540ef8b-9abe-407e-b407-8fd622639404"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "80c54eba-75fb-4f55-b549-49b4c740c221",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion \"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResult = {\n    type: \"ObjectExpression\",\n    properties: []\n};\nrootFST = new FSTNonTerminal(\"ObjectExpression\", \"root\");\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ObjectExpression\\\"}\";",
                      "err": {},
                      "uuid": "106224c6-ac5e-4d4e-8a41-8938f9856d44",
                      "parentUUID": "80c54eba-75fb-4f55-b549-49b4c740c221",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for empty ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "e3ef0eb1-7be1-4317-a045-2916f977d67e",
                      "parentUUID": "80c54eba-75fb-4f55-b549-49b4c740c221",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a string ObjectExpression \"{\"hello\": \"World\"}\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'hello');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"\\\"World\\\"\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"hello\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"hello\"\n    },\n    value: {\n        type: \"Literal\",\n        value: \"World\",\n        raw: \"\\\"World\\\"\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "171c9cd6-4d20-4566-89ae-da58534339be",
                      "parentUUID": "80c54eba-75fb-4f55-b549-49b4c740c221",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a number ObjectExpression \"{\"say\": 2}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'say');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"2\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"say\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"say\"\n    },\n    value: {\n        type: \"Literal\",\n        value: 2,\n        raw: \"2\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "20741f27-aa25-40f0-9738-d228cf213ba2",
                      "parentUUID": "80c54eba-75fb-4f55-b549-49b4c740c221",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a boolean ObjectExpression \"{\"toBe\": true}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'toBe');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"true\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"toBe\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"toBe\"\n    },\n    value: {\n        type: \"Literal\",\n        value: true,\n        raw: \"true\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "95be33b8-b7dc-469c-8c7e-73b0b0ee4db5",
                      "parentUUID": "80c54eba-75fb-4f55-b549-49b4c740c221",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a null ObjectExpression \"{\"its\": null}\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const textChild = new FSTTerminal('Property', 'its');\ntextChild.setMergeStrategy('propertyCompose');\ntextChild.setCodeLanguage('json');\ntextChild.setContent(\"null\");\ntextChild.setParent(rootFST);\ntextChild.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"its\\\"},\\\"kind\\\":\\\"init\\\"}\";\nrootFST.addChild(textChild);\ntempResult.properties.push({\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"its\"\n    },\n    value: {\n        type: \"Literal\",\n        value: null,\n        raw: \"null\"\n    }\n});\nconst transformedFST = strat.toAST(rootFST);\nexpect(transformedFST).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "b1e3d731-9001-45e9-8080-f38749f7bf1e",
                      "parentUUID": "80c54eba-75fb-4f55-b549-49b4c740c221",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e3ef0eb1-7be1-4317-a045-2916f977d67e",
                    "171c9cd6-4d20-4566-89ae-da58534339be",
                    "20741f27-aa25-40f0-9738-d228cf213ba2",
                    "95be33b8-b7dc-469c-8c7e-73b0b0ee4db5",
                    "b1e3d731-9001-45e9-8080-f38749f7bf1e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72cf357c-18d6-4072-9eb2-62a4c95e16e8",
              "title": "Check the conversion strategy for Property",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "75f274d9-2f77-4226-9fb4-93075544a41e",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootAST = {\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"test\"\n    },\n    value: undefined\n};\ntempResult = new FSTTerminal(\"Property\", \"test\");\ntempResult.setMergeStrategy('propertyCompose');\ntempResult.setCodeLanguage('json');\ntempResult.setParent();\ntempResult.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Identifier\\\",\\\"name\\\":\\\"test\\\"}}\";",
                      "err": {},
                      "uuid": "7cfee38e-8b0e-42f1-a1a6-1f245c5e6e12",
                      "parentUUID": "75f274d9-2f77-4226-9fb4-93075544a41e",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for empty Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "b3c0bf68-0508-434d-958b-440f443987d5",
                      "parentUUID": "75f274d9-2f77-4226-9fb4-93075544a41e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string Property \"Hello World\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a string Property \"Hello World\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: \"Hello World\",\n    raw: \"\\\"Hello World\\\"\"\n};\ntempResult.setContent(\"\\\"Hello World\\\"\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "12e79fbc-54d5-4a4c-bacd-797c07fbdd91",
                      "parentUUID": "75f274d9-2f77-4226-9fb4-93075544a41e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number Property \"1\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a number Property \"1\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: 1,\n    raw: \"1\"\n};\ntempResult.setContent(\"1\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "1e6d3d1d-5dcd-4c09-991b-aec47a5f9a59",
                      "parentUUID": "75f274d9-2f77-4226-9fb4-93075544a41e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Property true",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a boolean Property true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: true,\n    raw: \"true\"\n};\ntempResult.setContent(\"true\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "724fbfd4-eebd-4d38-9c64-1ceec7f8ce3a",
                      "parentUUID": "75f274d9-2f77-4226-9fb4-93075544a41e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null Property null",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a null Property null",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootAST.value = {\n    type: \"Literal\",\n    value: null,\n    raw: \"null\"\n};\ntempResult.setContent(\"null\");\nconst result = strat.toFST(rootAST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "1222e535-ae0d-4a4d-bf52-e138bff796df",
                      "parentUUID": "75f274d9-2f77-4226-9fb4-93075544a41e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b3c0bf68-0508-434d-958b-440f443987d5",
                    "12e79fbc-54d5-4a4c-bacd-797c07fbdd91",
                    "1e6d3d1d-5dcd-4c09-991b-aec47a5f9a59",
                    "724fbfd4-eebd-4d38-9c64-1ceec7f8ce3a",
                    "1222e535-ae0d-4a4d-bf52-e138bff796df"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "964fce06-ce27-4a46-bcbc-ef5f6f792c3a",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion \"before each\" hook: Setup FST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST = new FSTTerminal(\"Property\", \"test\");\nrootFST.setMergeStrategy('propertyCompose');\nrootFST.setCodeLanguage('json');\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"Property\\\",\\\"key\\\":{\\\"type\\\":\\\"Literal\\\",\\\"value\\\":\\\"test\\\",\\\"raw\\\":\\\"test\\\"}}\";\ntempResult = {\n    type: \"Property\",\n    key: {\n        type: \"Identifier\",\n        name: \"test\"\n    },\n    value: undefined\n};",
                      "err": {},
                      "uuid": "fdba5319-530d-47bc-a009-4984bffa0d47",
                      "parentUUID": "964fce06-ce27-4a46-bcbc-ef5f6f792c3a",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for empty Property \"\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "6540bbe2-3115-4874-bbe5-8a94612ee535",
                      "parentUUID": "964fce06-ce27-4a46-bcbc-ef5f6f792c3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string Property \"Hello World\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a string Property \"Hello World\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"\\\"Hello World\\\"\");\ntempResult.value = {\n    type: \"Literal\",\n    value: \"Hello World\",\n    raw: \"\\\"Hello World\\\"\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "4fba0258-17fd-426f-b934-cf1eea1d8cea",
                      "parentUUID": "964fce06-ce27-4a46-bcbc-ef5f6f792c3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number Property 1",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a number Property 1",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"1\");\ntempResult.value = {\n    type: \"Literal\",\n    value: 1,\n    raw: \"1\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "b463ed45-a2a9-46bf-8a0f-c0c5750683eb",
                      "parentUUID": "964fce06-ce27-4a46-bcbc-ef5f6f792c3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Property true",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a boolean Property true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"true\");\ntempResult.value = {\n    type: \"Literal\",\n    value: true,\n    raw: \"true\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "52cdd593-b545-4d0d-b6f8-b1049c536754",
                      "parentUUID": "964fce06-ce27-4a46-bcbc-ef5f6f792c3a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null Property null",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a null Property null",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent(\"null\");\ntempResult.value = {\n    type: \"Literal\",\n    value: null,\n    raw: \"null\"\n};\nconst result = strat.toAST(rootFST);\nexpect(result).to.be.eql(tempResult);",
                      "err": {},
                      "uuid": "f9870118-8615-46b1-b6c9-82cf8c465562",
                      "parentUUID": "964fce06-ce27-4a46-bcbc-ef5f6f792c3a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6540bbe2-3115-4874-bbe5-8a94612ee535",
                    "4fba0258-17fd-426f-b934-cf1eea1d8cea",
                    "b463ed45-a2a9-46bf-8a0f-c0c5750683eb",
                    "52cdd593-b545-4d0d-b6f8-b1049c536754",
                    "f9870118-8615-46b1-b6c9-82cf8c465562"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a96c0c5b-e3c0-4e73-a30d-81e69f0ef112",
          "title": "Test the parser for correct FST creation",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\parser.spec.js",
          "file": "\\lib\\parser.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "25dc5742-2d3b-4c13-bbf4-02effc1bbbf0",
              "title": "Check empty JSON root element parsing",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\parser.spec.js",
              "file": "\\lib\\parser.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check parser parses empty JSON object \"{}\"",
                  "fullTitle": "Test the parser for correct FST creation Check empty JSON root element parsing Check parser parses empty JSON object \"{}\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resultFST = new FSTNonTerminal('ObjectExpression', 'root');\nresultFST.setParent();\nresultFST.originNode = \"{\\\"type\\\":\\\"ObjectExpression\\\"}\";\nconst parsingResult = jsonParser.parse('{}');\nexpect(parsingResult).not.to.be.undefined;\nexpect(parsingResult).to.be.eql(resultFST);",
                  "err": {},
                  "uuid": "c58d3e3d-c8f0-47e1-8250-c5f5dec20ad6",
                  "parentUUID": "25dc5742-2d3b-4c13-bbf4-02effc1bbbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check parser parses empty JSON array \"[]\"",
                  "fullTitle": "Test the parser for correct FST creation Check empty JSON root element parsing Check parser parses empty JSON array \"[]\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resultFST = new FSTTerminal('ArrayExpression', 'root');\nresultFST.setParent();\nresultFST.setCodeLanguage('json');\nresultFST.setMergeStrategy('listConcat');\nresultFST.setContent([]);\nresultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\ndebugger;\nconst parsingResult = jsonParser.parse('[]');\nexpect(parsingResult).not.to.be.undefined;\nexpect(parsingResult).to.be.eql(resultFST);",
                  "err": {},
                  "uuid": "899fb8ad-316f-46e3-91ea-59c33313a867",
                  "parentUUID": "25dc5742-2d3b-4c13-bbf4-02effc1bbbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check parser parses empty JSON string \"\", throws error",
                  "fullTitle": "Test the parser for correct FST creation Check empty JSON root element parsing Check parser parses empty JSON string \"\", throws error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    jsonParser.parse('')\n}, 'Invalid JSON input');",
                  "err": {},
                  "uuid": "7932c7a2-ca44-4c24-ace8-cfb932c8b6bb",
                  "parentUUID": "25dc5742-2d3b-4c13-bbf4-02effc1bbbf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c58d3e3d-c8f0-47e1-8250-c5f5dec20ad6",
                "899fb8ad-316f-46e3-91ea-59c33313a867",
                "7932c7a2-ca44-4c24-ace8-cfb932c8b6bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8f31fe0f-c29e-4b6b-a647-7e6e9c005dd0",
          "title": "Imposing Rules",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
          "file": "\\lib\\rules\\RulesTest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f34c983a-c7b1-41e0-9803-6a3ca4d72aa9",
              "title": "Check the list concatenation of arrays",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
              "file": "\\lib\\rules\\RulesTest.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "36962cbf-be4d-48b8-a82d-2e8f36e35886",
                  "title": "Property merge",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
                  "file": "\\lib\\rules\\RulesTest.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                      "fullTitle": "Imposing Rules Check the list concatenation of arrays Property merge Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '[\"1\", \"2\"]';\nconst sFeatureJSON = '[\"3\"]';\nconst sResultJSON = formatResult('[\"1\",\"2\",\"3\"]');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "c5487a4e-697b-47d0-94df-22293cf5d967",
                      "parentUUID": "36962cbf-be4d-48b8-a82d-2e8f36e35886",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                      "fullTitle": "Imposing Rules Check the list concatenation of arrays Property merge Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '[\"1\"]';\nconst sFeatureJSON = '[{\"number\": 2}]';\nconst sResultJSON = formatResult('[\"1\", {\"number\": 2}]');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "540a4035-46ec-45d9-bc41-e40fa8c53745",
                      "parentUUID": "36962cbf-be4d-48b8-a82d-2e8f36e35886",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                      "fullTitle": "Imposing Rules Check the list concatenation of arrays Property merge Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '[\"1\"]';\nconst sFeatureJSON = '[[\"2\"]]';\nconst sResultJSON = formatResult('[\"1\", [\"2\"]]');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "766d5a91-2f88-4083-9ff1-b79163f08dda",
                      "parentUUID": "36962cbf-be4d-48b8-a82d-2e8f36e35886",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                      "fullTitle": "Imposing Rules Check the list concatenation of arrays Property merge Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '[[\"1\"], [\"2\"]]';\nconst sFeatureJSON = '[[\"3\"]]';\nconst sResultJSON = formatResult('[[\"1\"], [\"2\"], [\"3\"]]');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "de6afda7-3edc-4e16-bd46-9c8969b22e47",
                      "parentUUID": "36962cbf-be4d-48b8-a82d-2e8f36e35886",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                      "fullTitle": "Imposing Rules Check the list concatenation of arrays Property merge Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '[{\"prop\":\"1\"}, {\"prop\":\"2\"}]';\nconst sFeatureJSON = '[{\"prop\":\"3\"}]';\nconst sResultJSON = formatResult('[{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "39bf9ed9-f5e2-4566-b6d2-8ea9cfec1cad",
                      "parentUUID": "36962cbf-be4d-48b8-a82d-2e8f36e35886",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c5487a4e-697b-47d0-94df-22293cf5d967",
                    "540a4035-46ec-45d9-bc41-e40fa8c53745",
                    "766d5a91-2f88-4083-9ff1-b79163f08dda",
                    "de6afda7-3edc-4e16-bd46-9c8969b22e47",
                    "39bf9ed9-f5e2-4566-b6d2-8ea9cfec1cad"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 9,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10ce9f0d-162e-47c9-adb8-3f0463cbe16f",
              "title": "Check the composition of object expressions",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
              "file": "\\lib\\rules\\RulesTest.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "68ed2428-20be-4260-943d-4829e1b76231",
                  "title": "First level property imposing",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
                  "file": "\\lib\\rules\\RulesTest.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Test simple property addition",
                      "fullTitle": "Imposing Rules Check the composition of object expressions First level property imposing Test simple property addition",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '{\"simple\": \"base\"}';\nconst sFeatureJSON = '{\"additional\": \"feature\"}';\nconst sResultJSON = formatResult('{\"simple\":\"base\",\"additional\":\"feature\"}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "31fc0114-7f4d-4f35-9ca4-d5cfa9e834be",
                      "parentUUID": "68ed2428-20be-4260-943d-4829e1b76231",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test simple property replace \"base\" -> \"feature\"",
                      "fullTitle": "Imposing Rules Check the composition of object expressions First level property imposing Test simple property replace \"base\" -> \"feature\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '{\"simple\":\"base\"}';\nconst sFeatureJSON = '{\"simple\":\"feature\"}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "c6d7ce6e-2c85-4f01-add5-23aa3838daf0",
                      "parentUUID": "68ed2428-20be-4260-943d-4829e1b76231",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test simple property replace 1 -> 2",
                      "fullTitle": "Imposing Rules Check the composition of object expressions First level property imposing Test simple property replace 1 -> 2",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":2}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "d8803a01-b3da-4061-b76f-7e045529e546",
                      "parentUUID": "68ed2428-20be-4260-943d-4829e1b76231",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test simple property replace 1 -> {}",
                      "fullTitle": "Imposing Rules Check the composition of object expressions First level property imposing Test simple property replace 1 -> {}",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":{}}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "94da1c4d-145c-4100-891b-217eb6d89bb9",
                      "parentUUID": "68ed2428-20be-4260-943d-4829e1b76231",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test simple property replace 1 -> []",
                      "fullTitle": "Imposing Rules Check the composition of object expressions First level property imposing Test simple property replace 1 -> []",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":[]}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "1d9c8b7d-9867-4a7c-8288-6ca66fd3987a",
                      "parentUUID": "68ed2428-20be-4260-943d-4829e1b76231",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "31fc0114-7f4d-4f35-9ca4-d5cfa9e834be",
                    "c6d7ce6e-2c85-4f01-add5-23aa3838daf0",
                    "d8803a01-b3da-4061-b76f-7e045529e546",
                    "94da1c4d-145c-4100-891b-217eb6d89bb9",
                    "1d9c8b7d-9867-4a7c-8288-6ca66fd3987a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 8,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "32d3ce24-e089-42c2-abb5-aa8ab25e6bd6",
                  "title": "Property replacement",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
                  "file": "\\lib\\rules\\RulesTest.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Test object property replace {} -> 1",
                      "fullTitle": "Imposing Rules Check the composition of object expressions Property replacement Test object property replace {} -> 1",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '{\"object\":{\"test\":1}}';\nconst sFeatureJSON = '{\"object\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "c59c0ebb-53c4-49ce-be29-d10b33705b10",
                      "parentUUID": "32d3ce24-e089-42c2-abb5-aa8ab25e6bd6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Test array property replace [] -> 1",
                      "fullTitle": "Imposing Rules Check the composition of object expressions Property replacement Test array property replace [] -> 1",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                      "err": {},
                      "uuid": "e1d44021-52e1-44fa-be1c-d676a6e69421",
                      "parentUUID": "32d3ce24-e089-42c2-abb5-aa8ab25e6bd6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c59c0ebb-53c4-49ce-be29-d10b33705b10",
                    "e1d44021-52e1-44fa-be1c-d676a6e69421"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/test-results",
        "reportFilename": "testResults"
      },
      "version": "5.2.0"
    }
  }
}
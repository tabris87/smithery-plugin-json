{
  "stats": {
    "suites": 20,
    "tests": 54,
    "passes": 22,
    "pending": 32,
    "failures": 0,
    "start": "2021-07-28T08:30:49.146Z",
    "end": "2021-07-28T08:30:49.218Z",
    "duration": 72,
    "testsRegistered": 54,
    "passPercent": 100,
    "pendingPercent": 59.25925925925925,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dd4143fa-b444-45ad-8e65-d300000d5833",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "42ce0df3-0597-4dcf-b11f-cf1096e8a3fa",
          "title": "Check different imposings from an object root element",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
          "file": "\\test\\imposeObjectRoot.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "198d242b-ea4d-4e40-8c96-b6a70693780a",
              "title": "First level property imposing",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test simple property addition",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property addition",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"simple\":\"base\"}';\nconst sFeatureJSON = '{\"additional\":\"feature\"}';\nconst sResultJSON = formatResult('{\"simple\":\"base\",\"additional\":\"feature\"}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "afb9344b-cbcf-4018-8a07-0731ae001cbe",
                  "parentUUID": "198d242b-ea4d-4e40-8c96-b6a70693780a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace \"base\" -> \"feature\"",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace \"base\" -> \"feature\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"simple\":\"base\"}';\nconst sFeatureJSON = '{\"simple\":\"feature\"}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "da61c882-9006-4490-a9ac-e69c337f2b81",
                  "parentUUID": "198d242b-ea4d-4e40-8c96-b6a70693780a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> 2",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> 2",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":2}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "17070aab-923c-43a7-9591-7f9a8bb3c5c1",
                  "parentUUID": "198d242b-ea4d-4e40-8c96-b6a70693780a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> {}",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> {}",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":{}}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "fb0d92cb-ddfa-4c13-b8d1-1a2b594f126d",
                  "parentUUID": "198d242b-ea4d-4e40-8c96-b6a70693780a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test simple property replace 1 -> []",
                  "fullTitle": "Check different imposings from an object root element First level property imposing Test simple property replace 1 -> []",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"number\":1}';\nconst sFeatureJSON = '{\"number\":[]}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "f183d5d3-5fb5-4511-87af-4a4ea5d79863",
                  "parentUUID": "198d242b-ea4d-4e40-8c96-b6a70693780a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afb9344b-cbcf-4018-8a07-0731ae001cbe",
                "da61c882-9006-4490-a9ac-e69c337f2b81",
                "17070aab-923c-43a7-9591-7f9a8bb3c5c1",
                "fb0d92cb-ddfa-4c13-b8d1-1a2b594f126d",
                "f183d5d3-5fb5-4511-87af-4a4ea5d79863"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae289f0a-6bc2-441a-bb7d-2aba697bb618",
              "title": "Property replacement",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test object property replace {} -> 1",
                  "fullTitle": "Check different imposings from an object root element Property replacement Test object property replace {} -> 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"object\":{\"test\":1}}';\nconst sFeatureJSON = '{\"object\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "ff26a4f9-e235-46e0-b35c-4160dbe78a8f",
                  "parentUUID": "ae289f0a-6bc2-441a-bb7d-2aba697bb618",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property replace [] -> 1",
                  "fullTitle": "Check different imposings from an object root element Property replacement Test array property replace [] -> 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":1}';\nconst sResultJSON = formatResult(sFeatureJSON);\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "520c9e4f-4710-4425-9223-d76bf8a170c2",
                  "parentUUID": "ae289f0a-6bc2-441a-bb7d-2aba697bb618",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff26a4f9-e235-46e0-b35c-4160dbe78a8f",
                "520c9e4f-4710-4425-9223-d76bf8a170c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "438f030a-fb7e-4bb1-a84e-45ca05b2d748",
              "title": "Property merge",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\test\\imposeObjectRoot.spec.js",
              "file": "\\test\\imposeObjectRoot.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\", \"2\"] + [\"3\"] => [\"1\", \"2\", \"3\"]",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\", \"2\"]}';\nconst sFeatureJSON = '{\"array\":[\"3\"]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\",\"2\",\"3\"]}');\ndebugger;\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "9bfdd27d-2a8f-4d5a-8bad-cf3bf1c9edde",
                  "parentUUID": "438f030a-fb7e-4bb1-a84e-45ca05b2d748",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\"] + [{\"number\": 2}] => [\"1\", {\"number\": 2}]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":[{\"number\": 2}]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\", {\"number\": 2}]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "ee95b02c-38e4-4791-b563-5271db7cf2fc",
                  "parentUUID": "438f030a-fb7e-4bb1-a84e-45ca05b2d748",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [\"1\"] + [[\"2\"]] => [\"1\", [\"2\"]]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[\"1\"]}';\nconst sFeatureJSON = '{\"array\":[[\"2\"]]}';\nconst sResultJSON = formatResult('{\"array\": [\"1\", [\"2\"]]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "d420aadb-e680-48af-9044-0c1ff5fe1ee9",
                  "parentUUID": "438f030a-fb7e-4bb1-a84e-45ca05b2d748",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [[\"1\"], [\"2\"]] + [[\"3\"]] => [[\"1\"], [\"2\"], [\"3\"]]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[[\"1\"], [\"2\"]]}';\nconst sFeatureJSON = '{\"array\":[[\"3\"]]}';\nconst sResultJSON = formatResult('{\"array\": [[\"1\"], [\"2\"], [\"3\"]]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "b118eaa8-be65-4868-805b-20667a17e772",
                  "parentUUID": "438f030a-fb7e-4bb1-a84e-45ca05b2d748",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                  "fullTitle": "Check different imposings from an object root element Property merge Test array property merge [{\"prop\":\"1\"}, {\"prop\":\"2\"}] + [{\"prop\":\"3\"}] => [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sBaseJSON = '{\"array\":[{\"prop\":\"1\"}, {\"prop\":\"2\"}]}';\nconst sFeatureJSON = '{\"array\":[{\"prop\":\"3\"}]}';\nconst sResultJSON = formatResult('{\"array\": [{\"prop\":\"1\"}, {\"prop\":\"2\"}, {\"prop\":\"3\"}]}');\nexpect(imposing(sBaseJSON, sFeatureJSON)).to.be.equal(sResultJSON);",
                  "err": {},
                  "uuid": "bb419fc4-9426-4c9a-808b-b770930a24a3",
                  "parentUUID": "438f030a-fb7e-4bb1-a84e-45ca05b2d748",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bfdd27d-2a8f-4d5a-8bad-cf3bf1c9edde",
                "ee95b02c-38e4-4791-b563-5271db7cf2fc",
                "d420aadb-e680-48af-9044-0c1ff5fe1ee9",
                "b118eaa8-be65-4868-805b-20667a17e772",
                "bb419fc4-9426-4c9a-808b-b770930a24a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "117715e2-3c39-42f6-b9d9-51e4860a11ab",
          "title": "Transformation Strategies",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
          "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e95bb28-0e84-4465-93ef-94fd355c335b",
              "title": "Check the conversion strategy for ArrayExpressions",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d7a1a391-7434-40c5-bab6-40475034c70f",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion \"before each\" hook: Setup AST in \"Test the AST to FST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nrootAST = {\n    \"type\": \"ArrayExpression\",\n    \"start\": 0,\n    \"end\": 1,\n    \"elements\": []\n};\n//setup the base FST structure\ntempResultFST = new FSTTerminal('ArrayExpression', 'root');\ntempResultFST.setMergeStrategy('listConcat');\ntempResultFST.setCodeLanguage('json');",
                      "err": {},
                      "uuid": "70dd9a57-ca01-41aa-aa9a-22247348a330",
                      "parentUUID": "d7a1a391-7434-40c5-bab6-40475034c70f",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Successfull FST transformation for an empty ArrayExpression ('[]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an empty ArrayExpression ('[]')",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "d81edd47-8562-4c6a-a4c9-e7aebf33cd8e",
                      "parentUUID": "d7a1a391-7434-40c5-bab6-40475034c70f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\ntempResultFST.setParent();\ntempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nrootAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst transformedFST = arrayExpStrategy.toFST(rootAST);\nexpect(transformedFST).not.to.be.undefined;\nexpect(transformedFST instanceof FSTTerminal).to.be.true;\nexpect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "8172050e-f11e-4911-b618-d0123edf4e86",
                      "parentUUID": "d7a1a391-7434-40c5-bab6-40475034c70f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"\\\"a\\\"\", \"\\\"b\\\"\", \"\\\"c\\\"\", \"\\\"d\\\"\"]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"a\",\n                    \"raw\": \"'a'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"b\",\n                    \"raw\": \"'b'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"c\",\n                    \"raw\": \"'c'\"\n                });\n                rootAST.elements.push({\n                    \"type\": \"Literal\",\n                    \"value\": \"d\",\n                    \"raw\": \"'d'\"\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "09cffe91-66fc-4580-be39-e102a6ff34f7",
                      "parentUUID": "d7a1a391-7434-40c5-bab6-40475034c70f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by objects (\"[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]\")",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\"{\\n  \\\"hello\\\": \\\"World\\\"\\n}\", \"{\\n  \\\"say\\\": 2\\n}\", \"{\\n  \\\"return\\\": false\\n}\"]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"hello\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: \"World\",\n                                raw: \"\\\"World\\\"\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"say\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: 2,\n                                raw: \"2\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"return\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "923d85a5-0e72-487a-a565-a8d262bff4ce",
                      "parentUUID": "d7a1a391-7434-40c5-bab6-40475034c70f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the AST to FST conversion Successfull FST transformation for an ArrayExpression filled by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "tempResultFST.setContent([\n                    \"[\\n  \\\"a\\\",\\n  \\\"b\\\",\\n  \\\"c\\\",\\n  \\\"d\\\"\\n]\",\n                    \"[\\n  1,\\n  2,\\n  3,\\n  4\\n]\",\n                    \"[\\n  {\\n    \\\"hello\\\": \\\"World\\\"\\n  },\\n  {\\n    \\\"say\\\": 2\\n  },\\n  {\\n    \\\"return\\\": false\\n  }\\n]\"\n                ]);\n                tempResultFST.setParent();\n                tempResultFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: \"a\",\n                            raw: \"\\\"a\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"b\",\n                            raw: \"\\\"b\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"c\",\n                            raw: \"\\\"c\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"d\",\n                            raw: \"\\\"d\\\"\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: 1,\n                            raw: \"1\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 3,\n                            raw: \"3\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 4,\n                            raw: \"4\"\n                        }\n                    ]\n                });\n                rootAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"hello\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: \"World\",\n                                        raw: \"\\\"World\\\"\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"say\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: 2,\n                                        raw: \"2\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        type: \"Identifier\",\n                                        name: \"return\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: false,\n                                        raw: \"false\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        }\n                    ]\n                });\n                const transformedFST = arrayExpStrategy.toFST(rootAST);\n                expect(transformedFST).not.to.be.undefined;\n                expect(transformedFST instanceof FSTTerminal).to.be.true;\n                expect(transformedFST).to.be.eql(tempResultFST);",
                      "err": {},
                      "uuid": "87ca3b13-7108-40d6-a44d-edc1ca9e269e",
                      "parentUUID": "d7a1a391-7434-40c5-bab6-40475034c70f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d81edd47-8562-4c6a-a4c9-e7aebf33cd8e",
                    "8172050e-f11e-4911-b618-d0123edf4e86",
                    "09cffe91-66fc-4580-be39-e102a6ff34f7",
                    "923d85a5-0e72-487a-a565-a8d262bff4ce",
                    "87ca3b13-7108-40d6-a44d-edc1ca9e269e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fc01aba1-390f-4960-8591-f836ee44cd57",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion \"before each\" hook: Setup AST in \"Test the FST to AST conversion\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "//setup the base AST structure\nresultAST = {\n    \"type\": \"ArrayExpression\",\n    \"elements\": []\n};\n//setup the base FST structure\nrootFST = new FSTTerminal('ArrayExpression', 'root');\nrootFST.setMergeStrategy('listConcat');\nrootFST.setCodeLanguage('json');",
                      "err": {},
                      "uuid": "1acf2071-f1fe-4673-8ea6-8bf5618a27f9",
                      "parentUUID": "fc01aba1-390f-4960-8591-f836ee44cd57",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Successfull AST transformation for an empty ArrayExpression ('[]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an empty ArrayExpression ('[]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.be.eql(resultAST);",
                      "err": {},
                      "uuid": "b89233e5-aa8c-4e00-baae-f38f93d86d44",
                      "parentUUID": "fc01aba1-390f-4960-8591-f836ee44cd57",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by numbers ('[1,2,3,4]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"1\", \"2\", \"3\", \"4\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 1,\n    \"raw\": \"1\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 2,\n    \"raw\": \"2\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 3,\n    \"raw\": \"3\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": 4,\n    \"raw\": \"4\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "6448dc54-96f2-4b51-a4f3-8912fec933f6",
                      "parentUUID": "fc01aba1-390f-4960-8591-f836ee44cd57",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by strings ('[\"a\",\"b\",\"c\",\"d\"]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"'a'\", \"'b'\", \"'c'\", \"'d'\"]);\nrootFST.setParent();\nrootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"a\",\n    \"raw\": \"\\\"a\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"b\",\n    \"raw\": \"\\\"b\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"c\",\n    \"raw\": \"\\\"c\\\"\"\n});\nresultAST.elements.push({\n    \"type\": \"Literal\",\n    \"value\": \"d\",\n    \"raw\": \"\\\"d\\\"\"\n});\nconst recreatedAST = arrayExpStrategy.toAST(rootFST);\nexpect(recreatedAST).not.to.be.undefined;\nexpect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "0a5c42ed-df3c-4a2e-b965-e1c29ed0fb7c",
                      "parentUUID": "fc01aba1-390f-4960-8591-f836ee44cd57",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by objects ('[{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\"{ \\\"hello\\\": \\\"World\\\" }\", \"{ \\\"say\\\": 2 }\", \"{ \\\"return\\\": false }\"]);\n                rootFST.setParent();\n                rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"hello\",\n                                raw: \"\\\"hello\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: \"World\",\n                                raw: \"\\\"World\\\"\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"say\",\n                                raw: \"\\\"say\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: 2,\n                                raw: \"2\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ObjectExpression\",\n                    properties: [\n                        {\n                            type: \"Property\",\n                            key: {\n                                type: \"Literal\",\n                                value: \"return\",\n                                raw: \"\\\"return\\\"\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: false,\n                                raw: \"false\"\n                            },\n                            kind: \"init\"\n                        }\n                    ]\n                });\n                const recreatedAST = arrayExpStrategy.toAST(rootFST);\n                expect(recreatedAST).not.to.be.undefined;\n                expect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "4b593384-38ab-4eaf-ae4f-54229e65c7fa",
                      "parentUUID": "fc01aba1-390f-4960-8591-f836ee44cd57",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ArrayExpressions Test the FST to AST conversion Successfull AST transformation for an ArrayExpression filled by by Arrays ('[[\"a\",\"b\",\"c\",\"d\"], [1,2,3,4], [{\"hello\": \"World\"}, {\"say\": 2}, {\"return\": false}]]')",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "rootFST.setContent([\n                    \"[\\n    'a',\\n    'b',\\n    'c',\\n    'd'\\n]\",\n                    \"[\\n    1,\\n    2,\\n    3,\\n    4\\n]\",\n                    \"[\\n    { \\\"hello\\\": \\\"World\\\" },\\n    { \\\"say\\\": 2 },\\n    { \\\"return\\\": false }\\n]\"\n                ]);\n                rootFST.setParent();\n                rootFST.originNode = \"{\\\"type\\\":\\\"ArrayExpression\\\"}\";\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: \"a\",\n                            raw: \"\\\"a\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"b\",\n                            raw: \"\\\"b\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"c\",\n                            raw: \"\\\"c\\\"\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: \"d\",\n                            raw: \"\\\"d\\\"\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"Literal\",\n                            value: 1,\n                            raw: \"1\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 2,\n                            raw: \"2\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 3,\n                            raw: \"3\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: 4,\n                            raw: \"4\"\n                        }\n                    ]\n                });\n                resultAST.elements.push({\n                    type: \"ArrayExpression\",\n                    elements: [\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"hello\\\"\",\n                                        type: \"Literal\",\n                                        value: \"hello\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: \"World\",\n                                        raw: \"\\\"World\\\"\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"say\\\"\",\n                                        type: \"Literal\",\n                                        value: \"say\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: 2,\n                                        raw: \"2\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        },\n                        {\n                            type: \"ObjectExpression\",\n                            properties: [\n                                {\n                                    type: \"Property\",\n                                    key: {\n                                        raw: \"\\\"return\\\"\",\n                                        type: \"Literal\",\n                                        value: \"return\"\n                                    },\n                                    value: {\n                                        type: \"Literal\",\n                                        value: false,\n                                        raw: \"false\"\n                                    },\n                                    kind: \"init\"\n                                }\n                            ]\n                        }\n                    ]\n                });\n                const recreatedAST = arrayExpStrategy.toAST(rootFST);\n                expect(recreatedAST).not.to.be.undefined;\n                expect(recreatedAST).to.deep.equal(resultAST);",
                      "err": {},
                      "uuid": "fb0b84a2-fb21-4d3c-92bb-3db7b60e03e2",
                      "parentUUID": "fc01aba1-390f-4960-8591-f836ee44cd57",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b89233e5-aa8c-4e00-baae-f38f93d86d44",
                    "6448dc54-96f2-4b51-a4f3-8912fec933f6",
                    "0a5c42ed-df3c-4a2e-b965-e1c29ed0fb7c",
                    "4b593384-38ab-4eaf-ae4f-54229e65c7fa",
                    "fb0b84a2-fb21-4d3c-92bb-3db7b60e03e2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "508623b4-b22a-497a-a7ba-5f6c1a0a53fd",
              "title": "Check the conversion strategy for Literal",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "033e5a0f-24a6-41fd-a7eb-2bf5b11485cb",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for empty Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "0ff5eb49-f41c-4d53-aa0c-fc0d4e718e85",
                      "parentUUID": "033e5a0f-24a6-41fd-a7eb-2bf5b11485cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a string Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "20b3ab4d-2bff-4439-8c1a-849adaa9e43c",
                      "parentUUID": "033e5a0f-24a6-41fd-a7eb-2bf5b11485cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a number Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "760de8ca-501d-4695-9d66-6d127bec79f8",
                      "parentUUID": "033e5a0f-24a6-41fd-a7eb-2bf5b11485cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a boolean Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "0ec423ff-ef20-401b-b400-83db6d2254a7",
                      "parentUUID": "033e5a0f-24a6-41fd-a7eb-2bf5b11485cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the AST to FST conversion Check correct FST transformation for a null Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "e1cd9eb7-46e5-4005-ba2f-062ce6a7f42d",
                      "parentUUID": "033e5a0f-24a6-41fd-a7eb-2bf5b11485cb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "0ff5eb49-f41c-4d53-aa0c-fc0d4e718e85",
                    "20b3ab4d-2bff-4439-8c1a-849adaa9e43c",
                    "760de8ca-501d-4695-9d66-6d127bec79f8",
                    "0ec423ff-ef20-401b-b400-83db6d2254a7",
                    "e1cd9eb7-46e5-4005-ba2f-062ce6a7f42d"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "bbc04704-82f5-4926-aee4-26ffc40eff6a",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for empty Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "c4018bd4-2a04-480d-b556-e20652d0998b",
                      "parentUUID": "bbc04704-82f5-4926-aee4-26ffc40eff6a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a string Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "f1a81214-dd92-4980-a1bc-6bdfdc1c7561",
                      "parentUUID": "bbc04704-82f5-4926-aee4-26ffc40eff6a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a number Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "2e6c1a63-2555-44c5-9e3b-f839e62b14da",
                      "parentUUID": "bbc04704-82f5-4926-aee4-26ffc40eff6a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a boolean Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "43b35b7e-94bd-4720-90bf-c608f72b3471",
                      "parentUUID": "bbc04704-82f5-4926-aee4-26ffc40eff6a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null Literal \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Literal Test the FST to AST conversion Check correct AST transformation for a null Literal \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "e8053d48-bb70-47cc-9d3c-929ded6f9881",
                      "parentUUID": "bbc04704-82f5-4926-aee4-26ffc40eff6a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "c4018bd4-2a04-480d-b556-e20652d0998b",
                    "f1a81214-dd92-4980-a1bc-6bdfdc1c7561",
                    "2e6c1a63-2555-44c5-9e3b-f839e62b14da",
                    "43b35b7e-94bd-4720-90bf-c608f72b3471",
                    "e8053d48-bb70-47cc-9d3c-929ded6f9881"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4eccda80-62d8-4e04-a9bf-53377c938e1e",
              "title": "Check the conversion strategy for ObjectExpression",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fe7df012-010e-471a-97a5-caa60a3a982e",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for empty ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "52d7db40-e5f3-454e-8511-607268744d90",
                      "parentUUID": "fe7df012-010e-471a-97a5-caa60a3a982e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a string ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9cc2bb24-614e-49d1-8892-78fc543da1f9",
                      "parentUUID": "fe7df012-010e-471a-97a5-caa60a3a982e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a number ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "41633903-03a7-4502-80fb-db0e6ae83012",
                      "parentUUID": "fe7df012-010e-471a-97a5-caa60a3a982e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a boolean ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "30a082bf-c966-49b7-aefb-def2dfcbe516",
                      "parentUUID": "fe7df012-010e-471a-97a5-caa60a3a982e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the AST to FST conversion Check correct FST transformation for a null ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "d4c7beb1-0d4a-4f7e-990e-9ba9230856f6",
                      "parentUUID": "fe7df012-010e-471a-97a5-caa60a3a982e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "52d7db40-e5f3-454e-8511-607268744d90",
                    "9cc2bb24-614e-49d1-8892-78fc543da1f9",
                    "41633903-03a7-4502-80fb-db0e6ae83012",
                    "30a082bf-c966-49b7-aefb-def2dfcbe516",
                    "d4c7beb1-0d4a-4f7e-990e-9ba9230856f6"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "61246b1a-21ee-419d-a96a-3f8f0b286ab9",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for empty ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "18f56d69-a35a-4c35-bb65-574424d2368d",
                      "parentUUID": "61246b1a-21ee-419d-a96a-3f8f0b286ab9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a string ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "87c023c2-dad9-40e4-9f24-5160f1bbb322",
                      "parentUUID": "61246b1a-21ee-419d-a96a-3f8f0b286ab9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a number ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9fb56a4e-9a51-4b4c-98d7-153f04dd1f84",
                      "parentUUID": "61246b1a-21ee-419d-a96a-3f8f0b286ab9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a boolean ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "0604c73e-776f-4b1a-b6e3-6797de8375e6",
                      "parentUUID": "61246b1a-21ee-419d-a96a-3f8f0b286ab9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null ObjectExpression \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for ObjectExpression Test the FST to AST conversion Check correct AST transformation for a null ObjectExpression \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "4b2ce537-0a09-49e8-835f-01db9ae3370d",
                      "parentUUID": "61246b1a-21ee-419d-a96a-3f8f0b286ab9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "18f56d69-a35a-4c35-bb65-574424d2368d",
                    "87c023c2-dad9-40e4-9f24-5160f1bbb322",
                    "9fb56a4e-9a51-4b4c-98d7-153f04dd1f84",
                    "0604c73e-776f-4b1a-b6e3-6797de8375e6",
                    "4b2ce537-0a09-49e8-835f-01db9ae3370d"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "029756b0-a447-4ffb-ac01-a1f667ec7839",
              "title": "Check the conversion strategy for Property",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9960f3c9-0605-421d-ac93-fa67b0da215e",
                  "title": "Test the AST to FST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct FST transformation for empty Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for empty Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "32e101d8-7b50-453e-af88-41de4656b39e",
                      "parentUUID": "9960f3c9-0605-421d-ac93-fa67b0da215e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a string Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a string Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "3ec432ad-7070-48ad-abba-e643cea26748",
                      "parentUUID": "9960f3c9-0605-421d-ac93-fa67b0da215e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a number Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a number Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "0b2cc7c5-c6e9-4644-b71a-a56f1bb07604",
                      "parentUUID": "9960f3c9-0605-421d-ac93-fa67b0da215e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a boolean Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a boolean Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "d13ea5ba-d138-415a-89f4-22c3ee7a829f",
                      "parentUUID": "9960f3c9-0605-421d-ac93-fa67b0da215e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct FST transformation for a null Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the AST to FST conversion Check correct FST transformation for a null Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "e6e0ece1-507b-4403-953d-91dbc140bccd",
                      "parentUUID": "9960f3c9-0605-421d-ac93-fa67b0da215e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "32e101d8-7b50-453e-af88-41de4656b39e",
                    "3ec432ad-7070-48ad-abba-e643cea26748",
                    "0b2cc7c5-c6e9-4644-b71a-a56f1bb07604",
                    "d13ea5ba-d138-415a-89f4-22c3ee7a829f",
                    "e6e0ece1-507b-4403-953d-91dbc140bccd"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d470453c-33c0-4a47-8443-cefe1384a70b",
                  "title": "Test the FST to AST conversion",
                  "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "file": "\\lib\\astTools\\strategies\\StrategyTests.spec.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check correct AST transformation for empty Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for empty Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "b692e145-168f-47ea-8494-e5230633a2e2",
                      "parentUUID": "d470453c-33c0-4a47-8443-cefe1384a70b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a string Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a string Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "ff539b2f-4911-4e34-aa97-0f92d2ee3666",
                      "parentUUID": "d470453c-33c0-4a47-8443-cefe1384a70b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a number Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a number Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "1e3feb78-8ef5-4f07-a563-ebd39cc127cd",
                      "parentUUID": "d470453c-33c0-4a47-8443-cefe1384a70b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a boolean Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a boolean Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "6b3f262c-c573-4fc3-aae0-b10bc0b2065d",
                      "parentUUID": "d470453c-33c0-4a47-8443-cefe1384a70b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check correct AST transformation for a null Property \"\"",
                      "fullTitle": "Transformation Strategies Check the conversion strategy for Property Test the FST to AST conversion Check correct AST transformation for a null Property \"\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "pending",
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": true,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "fe23c8ae-7856-4534-95f0-1113491cb646",
                      "parentUUID": "d470453c-33c0-4a47-8443-cefe1384a70b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [
                    "b692e145-168f-47ea-8494-e5230633a2e2",
                    "ff539b2f-4911-4e34-aa97-0f92d2ee3666",
                    "1e3feb78-8ef5-4f07-a563-ebd39cc127cd",
                    "6b3f262c-c573-4fc3-aae0-b10bc0b2065d",
                    "fe23c8ae-7856-4534-95f0-1113491cb646"
                  ],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "17d28146-ab66-4f80-9b21-5b9e65dfc49d",
          "title": "Imposing Rules",
          "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
          "file": "\\lib\\rules\\RulesTest.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4ec58646-0721-4bd0-a283-262787a803ad",
              "title": "Check the list concatenation of arrays",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
              "file": "\\lib\\rules\\RulesTest.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Add meaningfull tests",
                  "fullTitle": "Imposing Rules Check the list concatenation of arrays Add meaningfull tests",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5fa267af-d5ca-4073-954a-aa531c6f777a",
                  "parentUUID": "4ec58646-0721-4bd0-a283-262787a803ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "5fa267af-d5ca-4073-954a-aa531c6f777a"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8313f10-b865-4968-8c96-eb2a18a7ecdf",
              "title": "Check the composition of object expressions",
              "fullFile": "C:\\Users\\martena\\Entwicklung\\smithery\\smithery-plugin-json\\lib\\rules\\RulesTest.spec.js",
              "file": "\\lib\\rules\\RulesTest.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Add meaningfull tests",
                  "fullTitle": "Imposing Rules Check the composition of object expressions Add meaningfull tests",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e71f5d80-ad24-4694-a574-7cde44545e3d",
                  "parentUUID": "a8313f10-b865-4968-8c96-eb2a18a7ecdf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "e71f5d80-ad24-4694-a574-7cde44545e3d"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/test-results",
        "reportFilename": "testResults"
      },
      "version": "5.2.0"
    }
  }
}